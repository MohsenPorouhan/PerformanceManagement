@{
    Layout = null;
}
@model PerformanceManagement.Models.HRAdmin.View.EditCompetencyAssignmentView

<form method="post" id="EditCompetencyAssignmentFrm" class="form-horizontal">
    <div class="modal fade modalClass" id="EditCompetencyAssignmentModal" tabindex="" aria-hidden="true">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header bg-blue">
                    <button type="button" id="modal-close" class="close"
                            data-dismiss="modal" aria-hidden="true"></button>
                    <h4 class="modal-title">
                        <i class="fa fa-file-o"></i>
                        ویرایش @Model.Title

                    </h4>
                </div>

                <div class="modal-body">
                    <div class="form-body">

                        <div id="alert_danger" class="alert alert-danger display-hide">
                            <button class="close" data-close="alert"></button>
                            پر کردن فيلدهاي ستاره دار اجباري مي باشد.
                        </div>
                        <div class="alert alert-block alert-info fade in">
                            <button type="button" class="close" data-dismiss="alert"></button>
                            <h4 class="alert-heading">روش وزن دهی</h4>
                            <p id="weightWayInfo2">

                            </p>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-md-4">
                                        وزن
                                        <span class="required">
                                            *
                                        </span>
                                    </label>
                                    <div class="col-md-8">
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            @{
                                                var BehaviouralCompetencyWeight = "";
                                            }
                                            @if (Model.BehaviouralCompetencyWeight != 0)
                                            {
                                                BehaviouralCompetencyWeight = Model.BehaviouralCompetencyWeight.ToString();
                                            }
                                            <input type="text" value="@BehaviouralCompetencyWeight" name="behaviouralCompetencyWeight" id="behaviouralCompetencyWeight" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <input type="hidden" id="evaluationBehaviouralParticipantId" name="evaluationBehaviouralParticipantId" value="@Model.EvaluationBehaviouralParticipantId" />
                            <input type="hidden" id="evaluationBehaviouralCompetencyId" name="evaluationBehaviouralCompetencyId" value="@Model.EvaluationBehaviouralCompetencyId" />
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label col-md-4">
                                        سایرارزیاب
                                        <span class="required">

                                        </span>
                                    </label>
                                    <div class="col-md-8">
                                        <div class="input-icon right">
                                            <i class="fa"></i>
                                            <select id="participantId" name="participantId" class="select2 select2-2 participant form-control">
                                                <option></option>
                                                @foreach (var item2 in Model.EvaluationCompetencyParticipants)
                                                {
                                                    if (item2.PeopleId == Model.ParticipantId && item2.EvaluationHierarchyId == Model.ParticipantEvaluationBehaviouralHierarchyId)
                                                    {
                                                        <option selected="selected" value="@item2.EvaluationHierarchyId-@item2.PeopleId"> @item2.fullname </option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@item2.EvaluationHierarchyId-@item2.PeopleId"> @item2.fullname </option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- END FORM-->
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn green input-sm input-small" id="EditCompetencyAssignmentBTN">ذخيره</button>
                    <button type="button" class="btn red input-sm input-small" id="cancel11" data-dismiss="modal"><i class="fa fa-times"></i>انصراف</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
</form>
<script>
    $('.select2-2').select2({
        placeholder: "انتخاب کنید",
        allowClear: true
    });
    var weightWay = "";
    var numberScaleList = [];
    $.ajax({
        type: 'get',
        url: '/Share/GetBehaviourWeightWay',
        data: { periodDefinitionId: @Model.PeriodDefinitionId },
        async: false,
        success: function (data) {
            weightWay = data;

            if (data == 1) {
                $("#weightWayInfo2").html("وزن دهی به صورت درصدی و بازه مجاز از 1 تا 100 می باشد.");
            } else if (data == 2) {
                $.ajax({
                    type: 'get',
                    url: '/Share/GetBehaviourLikertScale',
                    data: { periodDefinitionId: @Model.PeriodDefinitionId },
                    async: false,
                    success: function (data) {
                        $("#weightWayInfo2").html("وزن دهی به صورت طیف لیکرت می باشد. و بازه های مجاز جهت وزن دهی ");
                        $(data).each(function (i, d) {
                            numberScaleList.push(d.numberScale);
                            $("#weightWayInfo2").append(d.numberScale + ":" + d.titleScale + "  ");
                        });
                    },
                    error: function (status) {
                        alert("Error");
                    }
                })
            }
        },
        error: function (status) {
            alert("Error");
        }
    })

    var setRange;
    var messageRange;
    if (weightWay == 1) {
        setRange = [1, 100];
        messageRange= "لطفا عددی بین 1 تا 100 وارد نمایید";
    }
    else if (weightWay == 2) {
        setRange = [Math.min.apply(Math, numberScaleList), Math.max.apply(Math, numberScaleList)];
        messageRange = "لطفا عددی بین " + Math.min.apply(Math, numberScaleList) + " تا " + Math.max.apply(Math, numberScaleList) + " وارد نمایید";
    }

    $("#EditCompetencyAssignmentFrm").submit(function (e) {
        //alert('dpCreationSubmit');
        //var postdata2 = $(this).serializeArray();
        //debugger;

        var form = $('#EditCompetencyAssignmentFrm');

        form.validate({
            //console.log($('#registerform').serializeArray());
            errorElement: 'span', //default input error message container
            errorClass: 'help-block', // default input error message class
            focusInvalid: false, // do not focus the last invalid input
            ignore: "",
            rules: {
                behaviouralCompetencyWeight: {
                    required: true,
                    number: true,
                    range:setRange
                }
            },
            messages: {
                behaviouralCompetencyWeight: {
                    required: "پر کردن این فیلد الزامی می باشد",
                    number: "لطفا عدد وارد نمایید",
                    range: messageRange
                }
            },
            invalidHandler: function (event, validator) { //display error alert on form submit
                //                    success2.hide();
                //                    error2.show();
                //                    App.scrollTo(error2, -200);
            },
            errorPlacement: function (error, element) { // render error placement for each input type
                var icon = $(element).parent('.input-icon').children('i');
                icon.removeClass('fa-check').addClass("fa-warning");
                icon.attr("data-original-title", error.text()).tooltip();
            },
            highlight: function (element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').addClass('has-error'); // set error class to the control group
            },

            unhighlight: function (element) { // revert the change done by hightlight

            },

            success: function (label, element) {
                var icon = $(element).parent('.input-icon').children('i');
                $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                icon.removeClass("fa-warning").addClass("fa-check");
            },

            submitHandler: function (form) {
                //                    success2.show();
                //                    error2.hide();
            }
        })

        if (form.valid() == false) {
            //console.log($('#registerform').serializeArray());
            return false;
        } else {

            //$("#articleSubmit").addClass('disabled');
            var btn = $("#EditCompetencyAssignmentBTN");
            btn.button('loading');
            var postdata = new FormData(this);
            //listOfSubTask = JSON.stringify(listOfSubTask);
            //var postdata = $(this).serializeArray();
            //postdata.append(JSON.stringify(listOfSubTask));
            //console.log(postdata);
            $.ajax(
                {
                    //data:postdata,
                    url: '/BehaviouralCompetencyAssign/EditBehaviouralCompetencyAssignment',
                    //url : formURL,
                    //data: postdata,
                    data: postdata,
                    //data: "firstName=" + $("fn").val(),
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',

                    success: function (data, textStatus, jqXHR) {
                        var message = "";
                        if (data > 0) {
                            message += "<span>اطلاعات  مورد نظر با موفقیت ویرایش گردید</span><br><br>";
                            toastr.options.timeOut = "15000";
                            toastr.options.positionClass = "toast-top-center";
                            toastr.success(message);
                            dt.ajax.reload();
                            $("#EditCompetencyAssignmentFrm")[0].reset();
                            $("#EditCompetencyAssignmentModal").modal("hide");
                        }
                        else if (data == 0) {
                            message += "<span>اطلاعات  مورد نظر ویرایش نگردید..</span><br><br>";
                            toastr.options.timeOut = "15000";
                            toastr.options.positionClass = "toast-top-center";
                            toastr.info(message);
                        } else if (data='notRemovedException') {
                            message += "<span>حذف سایر ارزیاب امکان پذیر نمی باشد</span><br><br>";
                            toastr.options.timeOut = "15000";
                            toastr.options.positionClass = "toast-top-center";
                            toastr.info(message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("erorr00000");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                }).always(function () {
                    $("#EditCompetencyAssignmentBTN").button('reset');
                });
            //$.getScript('/assets/javascript/articleForm.js', function () {
            //    ArticleForm.init(postdata);
            //    $("#articleForm")[0].reset();
            //});
            e.preventDefault(e);
        }
    });

    $('#EditCompetencyAssignmentModal').modal('show');

</script>
