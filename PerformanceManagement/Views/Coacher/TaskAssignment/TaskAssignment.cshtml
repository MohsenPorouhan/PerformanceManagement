@{
    ViewData["Title"] = "تعیین وظایف افراد زیر مجموعه";
}
@section Styles{
    @*<link rel="stylesheet" type="text/css" href="/assets/plugins/jquery-multi-select/css/multi-select-rtl.css" />*@
<link rel="stylesheet" type="text/css" href="/assets/plugins/bootstrap-toastr/toastr-rtl.min.css" />
<link rel="stylesheet" href="/assets/plugins/bootstrap-switch/css/bootstrap-switch-rtl.min.css" />
    @*<link rel="stylesheet" type="text/css" href="/assets/plugins/select2/select2-rtl.css" />*@
<link rel="stylesheet" type="text/css" href="/assets/plugins/select2v4/select2/dist/css/select2.css" />
    @*<link id="select2-metronic" rel="stylesheet" type="text/css" href="/assets/plugins/select2/select2-metronic-rtl.css" />*@
    @*<link href="/assets/plugins/bootstrap-modal/css/bootstrap-modal-bs3patch.css" rel="stylesheet" type="text/css" />
<link href="/assets/plugins/bootstrap-modal/css/bootstrap-modal.css" rel="stylesheet" type="text/css" />*@
<link rel="stylesheet" href="/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.css" />

<link rel="stylesheet" href="/assets/advancedDataTable/jquery.dataTables.css" />
<link rel="stylesheet" href="/assets/advancedDataTable/buttons.dataTables.css" />
<style>
    .tag-editor li {
        float: right;
    }

    .input-icon.right i {
        right: auto !important;
    }

    .tag-editor {
        line-height: 27px;
        /*max-width: 300px;*/
        overflow: auto;
    }

    .btn-sm, .btn-xs {
        margin: 2px;
    }

    td.details-control {
        background: url('/assets/img/details_open.png') no-repeat center center;
        cursor: pointer;
    }

    tr.details td.details-control {
        background: url('/assets/img/details_close.png') no-repeat center center;
    }

    .dataTable .details td, .dataTable .details th {
        padding: 8px;
        background: none;
        border: 0;
    }

    .input-DT {
        margin-left: 5px;
    }

    .select2-container .select2-choice > .select2-chosen {
        /*display: block;*/
        overflow: initial;
    }

    #criteria-list {
        z-index: 99999 !important;
    }

    .btn-add, .h3-section {
        margin-right: 10px !important;
    }

    .input-icon.right i {
        z-index: +100;
    }

    .select2-container--open .select2-dropdown {
        z-index: 99999999
    }

    #dataTables_filter_subSet {
        margin-top: 32px;
    }
    /*generated dynamically in textTaskIndirect and because of bug had set width*/
    #participantt2Select21 {
        width: 176px;
    }

    table.dataTable tbody tr.selected td {
        background-color: #B0BED9;
    }
    /*begin of autocomplete*/
    .ui-autocomplete-loading {
        background: white url('/assets/img/input-spinner.gif') right center no-repeat;
    }

    .ui-front {
        z-index: 99999999;
    }
    /*end of autocomplete*/
</style>
}
<!-- BEGIN PAGE HEADER-->
<div class="row">
    <div class="col-md-12">
        <!-- BEGIN PAGE TITLE & BREADCRUMB-->
        <h3 class="page-title">
            <small></small>

        </h3>
        <div class="clearfix"></div>
        <ul class="page-breadcrumb breadcrumb">
            <li>
                <i class="fa fa-home"></i>
                <a href="/home">
                    خانه
                </a>
                <i class="fa fa-angle-left"></i>
            </li>
            <li>
                <a href="#">
                    مسیر مورد نظر
                </a>
            </li>
            <li class="pull-right">
                <div id="dashboard-report-range" class="dashboard-date-range tooltips" data-placement="top" data-original-title="Change dashboard date range">
                    <i class="fa fa-calendar"></i>
                    <span>
                    </span>
                    <i class="fa fa-angle-down"></i>
                </div>
            </li>
        </ul>
        <!-- END PAGE TITLE & BREADCRUMB-->
    </div>
</div>
<!-- END PAGE HEADER-->

<div class="row">
    <div class="col-md-12">
        <div class="portlet blue box">
            <div class="portlet-title">
                <div class="caption">
                    <i class="fa fa-cogs"></i>اختصاص اهداف و فعالیت ها به نفرات
                </div>
                <div class="tools">
                    <a href="javascript:;" class="collapse">
                    </a>
                    <a href="#portlet-config" data-toggle="modal" class="config">
                    </a>
                    <a href="javascript:;" id="reload" class="reload">
                    </a>
                    <a href="javascript:;" class="remove">
                    </a>
                </div>
            </div>
            <div class="portlet-body">
                <div class="tabbable-custom ">
                    <ul class="nav nav-tabs ">
                        <li class="active">
                            <a href="#tab_5_1" data-toggle="tab">
                                مدیریت وظایف
                            </a>
                        </li>
                        <li>
                            <a id="subsetTaskScore" href="#tab_5_2" data-toggle="tab">
                                مشاهده وظایف و نمرات کل زیرمجموعه
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab_5_1">
                            @*<a id="taskAssignmentBtn" class="btn blue btn-sm pull-left" data-toggle="modal">تعیین وظیفه برای افراد مستقیم</a>

                            <a id="taskAssignmentToIndirectBtn" class="btn blue btn-sm pull-left" data-toggle="modal">تعیین وظیفه برای افراد غیر مستقیم</a>*@
                            <div class="btn-group">
                                <button type="button" class="btn blue btn-sm dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="1000" data-close-others="true">
                                    تعیین وظیفه
                                    <i class="fa fa-angle-down"></i>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    <li>
                                        <a id="taskAssignmentBtn" data-toggle="modal">
                                            مستقیم
                                        </a>
                                    </li>
                                    <li class="disabled">
                                        <a id="taskAssignmentToIndirectBtn_____Disable" data-toggle="modal">
                                            غیر مستقیم
                                        </a>
                                    </li>
                                    <li>
                                        <a id="taskAssignmentTransferBtn" data-toggle="modal">
                                            انتقال تفاهمات از دوره قبل
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="btn-group">
                                <a id="weightAssignmentBtn" class="btn blue btn-sm pull-left" data-toggle="modal">وزن دهی وظایف</a>
                            </div>

                            @*<a id="scoreAssignmentBtn" class="btn blue btn-sm pull-left" data-toggle="modal">نمره دهی به اهداف کارمند انتخاب شده</a>*@
                            <div class="btn-group">
                                <a id="renewContract" class="btn blue btn-sm pull-left" data-toggle="modal">تغییر وضعیت تفاهم</a>
                            </div>

                            <div class="btn-group">
                                <button type="button" class="btn blue btn-sm dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" data-delay="1000" data-close-others="true">
                                    نمره دهی به اهداف کارمند انتخاب شده
                                    <i class="fa fa-angle-down"></i>
                                </button>
                                <ul class="dropdown-menu" role="menu">
                                    <li>
                                        <a class="scoreAssignmentBtn" coacherType="1">
                                            به عنوان مربی اصلی
                                        </a>
                                    </li>
                                    <li>
                                        <a class="scoreAssignmentBtn" coacherType="2">
                                            به عنوان مربی فرعی
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="clearfix">
                            </div>
                            <table class="table table-striped table-bordered table-hover table-responsive" id="taskAssignmentTable">
                                <thead>
                                    <tr>
                                        <th>
                                            کد دوره
                                        </th>
                                        <th>
                                            نام دوره
                                        </th>
                                        <th>
                                            نام اختصاص دهنده
                                        </th>
                                        <th>
                                            واحد اختصاص دهنده
                                        </th>
                                        <th>
                                            نقش تخصیص دهنده
                                        </th>
                                        <th>
                                            نام گیرنده
                                        </th>
                                        <th>
                                            عنوان وظیفه
                                        </th>
                                        <th>
                                            وزن وظیفه
                                        </th>
                                        <th>
                                            منبع
                                        </th>
                                        <th>
                                            وضعیت تفاهم
                                        </th>
                                        @*
                                        <th>
                                            وضعیت پذیرش سایر ارزیاب
                                        </th>*@
                                        <th>
                                            نمرات
                                        </th>
                                        <th>
                                            ویرایش
                                        </th>
                                        <th>
                                            حذف
                                        </th>
                                        <th>
                                            مصادیق/شاخص
                                        </th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class="tab-pane" id="tab_5_2">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Plugins{
<script src="/assets/plugins/jquery-validation/dist/jquery.validate.min.js" type="text/javascript"></script>
<script src="/assets/plugins/bootstrap-toastr/toastr.min.js"></script>
<script src="/assets/scripts/custom/ui-toastr.js"></script>
<script src="/assets/plugins/bootstrap-switch/js/bootstrap-switch-rtl.min.js" type="text/javascript"></script>
    @*
<script type="text/javascript" src="/assets/plugins/select2/select2.min.js"></script>*@

<script type="text/javascript" src="/assets/plugins/select2v4/select2/dist/js/select2.min.js"></script>
<script src="/assets/plugins/jQuery-tagEditor-master/jquery.caret.min.js"></script>
<script src="/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.min.js"></script>
<script src="/assets/plugins/jquery-validation/dist/jquery.validate.min.js" type="text/javascript"></script>

    @*
<script src="/assets/plugins/bootstrap-modal/js/bootstrap-modalmanager.js" type="text/javascript"></script>
<script src="/assets/plugins/bootstrap-modal/js/bootstrap-modal.js" type="text/javascript"></script>*@

<script src="/assets/advancedDataTable/DataTables-1.10.19.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/Buttons-for-DataTables-1.5.2.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/buttons.print.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/buttons.ColVis.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/jsZip.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/pdfmake.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/pdfmake.font.js" type="text/javascript"></script>
<script src="/assets/advancedDataTable/buttons.html5.js" type="text/javascript"></script>

}

@section Scripts{

<script>
    $('.select2').select2({
        placeholder: "انتخاب کنید",
        allowClear: true
    });

    var dt;
    var dt2;
    function getCriteria(d) {
        var r;
        $.ajax({
            url: "/TaskAssignment/GetCriteria",
            type: "POST",
            data: {
                taskId: d.TaskId,
                evaluationId: d.EvaluationId
            },
            async: false,
            dataType: "html",
            success: function (result) {
                r = result;
            }
        });
        return r;
    }
    function show_dataTable() {
        dt = $('#taskAssignmentTable').DataTable({
            dom: 'CT<"clearfix">lBfrtip',
            buttons: [
                'copy', 'csv', 'excel',
                'pdf',
                {
                    extend: 'pdfHtml5',
                    download: 'open',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'print',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                'colvis'
            ],
            columnDefs: [
                {
                    targets: [-1],
                    visible: false
                }
            ],
            "fnInitComplete": function (oSettings, json) {

            },
            "fnDrawCallback": function (oSettings) {

                $(".viewScoreBtn").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    $.ajax(
                        {
                            url: "/TaskAssignment/ViewScore",
                            contentType: 'aplication/json;charset=utf-8',
                            type: "GET",
                            datatype: 'html',
                            data: { periodDefinitionId: $(this).attr("periodDefinitionId") },
                            success: function (data, textStatus, jqXHR) {
                                $("#modalPlace").html(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert("erorr");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $(".editTaskAssignmentBtn").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    $.ajax(
                        {
                            url: "/TaskAssignment/EditTaskAssignment",
                            contentType: 'aplication/json;charset=utf-8',
                            type: "GET",
                            datatype: 'html',
                            data: {
                                periodDefinitionId: row.data().PeriodDefinitoionId
                                , departmentId: row.data().AllocatorEvaluationHierarchyId
                                , allocatorPersonId: row.data().AllocatorPersonId
                                , title: row.data().Title
                                , resourceType: row.data().ResourceType
                                , taskId: row.data().TaskId
                                , participantConfirmation: row.data().participantConfirmation
                                , evaluationId: row.data().EvaluationId
                                , parentTaskId: row.data().ParentTaskId
                            },
                            success: function (data, textStatus, jqXHR) {
                                $("#modalPlace").html(data);
                                $('.criteriaSwitch').bootstrapSwitch();
                                $('.trainingNeedSwitch').bootstrapSwitch();
                                if (data.notAllowed) {
                                    var message = "";
                                    message += "<span> جهت ویرایش وظایف شکسته شده تخصیصی، فقط از آنهایی که نیازآموشی یا سایرارزیاب دارند امکان پذیر می باشد. </span><br><br>" +
                                        "<span>وظایفی که فقط خود اختصاص دهنده آن هستید قابل ویرایش می باشد.</span><br><br>";
                                    toastr.options.timeOut = "15000";
                                    toastr.options.positionClass = "toast-top-center";
                                    toastr.info(message);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert("erorr");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $(".deleteTaskAssignmentBtn").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    EvaluationView = {};
                    EvaluationView.PeriodDefinitionId = row.data().PeriodDefinitoionId;
                    EvaluationView.AllocatorDepartmentId = row.data().AllocatorEvaluationHierarchyId;
                    EvaluationView.allocatorPersonId = row.data().AllocatorPersonId;
                    EvaluationView.HasParticipant = row.data().hasParticipant;
                    EvaluationView.ResourceType = row.data().ResourceType;
                    EvaluationView.EvaluationId = row.data().EvaluationId;
                    EvaluationView.TaskTitle = row.data().Title;

                    console.log(EvaluationView);
                    $.ajax(
                        {
                            //data:postdata,
                            url: '/TaskAssignment/DeleteTaskAssignmentPartial',
                            //url : formURL,
                            //data: postdata,
                            data: JSON.stringify(EvaluationView),
                            //data: "firstName=" + $("fn").val(),
                            //cache: false,
                            //contentType: false,
                            //processData: false,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            type: 'POST',
                            success: function (data, textStatus, jqXHR) {
                                $("#modalPlace").html(data);

                                if (data.notAllowed) {
                                    var message = "";
                                    message += "<span>وظایفی که فقط خود اختصاص دهنده آن هستید قابل حذف می باشد.</span><br><br>";
                                    toastr.options.timeOut = "15000";
                                    toastr.options.positionClass = "toast-top-center";
                                    toastr.info(message);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert("erorr");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $(".refutationCauseBtn").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);

                    $.ajax(
                        {
                            url: '/TaskAssignment/RefutationCauseLookAt',
                            data: {
                                title: row.data().Title
                                , evaluationId: row.data().EvaluationId
                            },
                            datatype: 'html',
                            type: 'POST',
                            success: function (data, textStatus, jqXHR) {
                                $("#modalPlace").html(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert("erorr");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                // Array to track the ids of the details displayed rows
                var detailRows = [];
                $('.details-control').on('click', function () {
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    var idx = $.inArray(tr.attr('id'), detailRows);

                    if (row.child.isShown()) {
                        tr.removeClass('details');
                        row.child.hide();

                        // Remove from the 'open' array
                        detailRows.splice(idx, 1);
                    }
                    else {
                        tr.addClass('details');
                        row.child(getCriteria(row.data())).show();

                        // Add to the 'open' array
                        if (idx === -1) {
                            detailRows.push(tr.attr('id'));
                        }
                    }
                });
                // On each draw, loop over the `detailRows` array and show any child rows
                dt.on('draw', function () {
                    $.each(detailRows, function (i, id) {
                        $('#' + id + ' td.details-control').trigger('click');
                    });
                });
            },
            "pagingType": "full_numbers",
            "lengthMenu": [
                [50, 25, 10, -1],
                [50, 25, 10, "All"]
            ],
            "columnDefs": [
                { "orderable": false, "targets": [9, 10, 11, 12, 13] }
            ],
            "processing": true,
            "serverSide": true,
            "ajax": {
                "url": "/TaskAssignment/GetAssignedTaskList",
                "type": "Post",
                "data": function (d) {
                    d.employeeId2 = $('#employeeId').children('option:selected').val(),
                        d.periodDefinitionIdDT2 = $('#periodDefinitionIdDT').children('option:selected').val(),
                        d.departmentIdDT = $('#departmentId').children('option:selected').val()
                },
                //"contentType": 'application/json; charset=utf-8',
                //"cache": false,
                "dataType": "json",
                //'data': function (data) {
                //    data = JSON.stringify(data)
                //    return data;
                //}
            },
            "aoColumns": [
                {
                    "mData": "PeriodCode",
                },
                {
                    "mData": "PeriodTitle"
                },
                {
                    "mData": "allocatorFullName",
                    "render": function (data, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
                        return data;
                    }
                },
                {
                    "mData": "allocatorDepartmentName",
                    "render": function (data, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
                        return data;
                    }
                },
                {
                    "mData": "allocatorRoleName",
                    "render": function (data, type, row, meta) {
                        if (data == "PlanningAdmin") {
                            data = 'ادمین برنامه ریزی'
                        }
                        else if (data == "Coacher") {
                            data = 'مربی'
                        }
                        else if (data == "HRAdmin") {
                            data = 'ادمین سرمایه انسانی'
                        }
                        return data;
                    }
                },
                {
                    "mData": "text"
                },
                {
                    "mData": "Title"
                },
                {
                    "mData": "TaskWeight"
                },
                {
                    "mData": "ResourceType",
                    "render": function (data, type, row, meta) {
                        if (data == "1") {
                            data = "اهداف کلان";
                        }
                        else if (data == "2") {
                            data = "وظایف عمومی";
                        }
                        else if (data == "3") {
                            data = "وظایف شکسته شده";
                        } else if (data == "4") {
                            data = "وظایف متنی";
                        }
                        return data;
                    }
                },
                {
                    "mData": "EvaluationAcceptanceStatusId",
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        if (data == "1") {
                            data = "<span class='label label-sm label-success'>تفاهم</span>";
                        }
                        else if (data == "2") {
                            data = "<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-warning'>ابلاغی</span></a>";
                        }
                        else if (data == "3") {
                            data = "<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-info'>صرف نظر</span></a>";
                        } else if (data == "4") {
                            data = "<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-danger'>نامشخص</span></a>";
                        }
                        return data;
                    }
                },
                //{
                //    "mData": "hasParticipant",
                //    "render": function (data, type, row, meta) {
                //        if (data == "1") {
                //            if (row.participantConfirmation == 0) {
                //                data = "<span class='label label-sm label-info'>عدم پذیرش</span>";
                //            } else if (row.participantConfirmation == 1) {
                //                data = "<span class='label label-sm label-success'>پذیرش</span>";
                //            } else if (row.participantConfirmation == null) {
                //                data = "<span class='label label-sm label-warning'>نامشخص</span>";
                //            }
                //        } else {
                //            data = 'فاقد سایرارزیاب';
                //        }
                //        return data;
                //    }
                //},
                {
                    "mData": null,
                    "render": function (data, type, row, meta) {
                        data = "<a href='#' data-toggle='modal' periodDefinitionId=" + row.PeriodDefinitoionId + " class='btn viewScoreBtn'><i class='fa fa-eye'></i></a>";
                        return data;
                    }
                },
                {
                    "mData": null,
                    "render": function (data, type, row, meta) {
                        data = "<a href='#' data-toggle='modal' class='btn editTaskAssignmentBtn'><i class='fa fa-edit'></i></a>";
                        return data;
                    }
                },
                {
                    "mData": null,
                    "render": function (data, type, row, meta) {
                        data = "<a href='#' data-toggle='modal' class='btn deleteTaskAssignmentBtn'><i class='fa fa-trash-o'></i></a>";
                        return data;
                    }
                },
                {
                    "class": "details-control",
                    "orderable": false,
                    "data": null,
                    "defaultContent": ""
                }
            ]
        });
    }
    show_dataTable();

    function resetFormValidation() {
        optgroupId = 0;
        $(".chk-click").each(function () {
            if ($(this).is(":checked")) {
                $(this).parent("span").removeClass("checked");
            }
        })
        $('#subTaskResource').addClass("hidden");
        $("#subTaskCollapse .row:gt(0)").remove();
        i = 1;
        $('#textResource').addClass("hidden");
        $("#collapseTextTask .row:gt(0)").remove();
        $("#critriaPlaceHolder .modal ").remove();
        j = 1;
        citeriaModalIndex = 1;
        citeriaRowIndex = 1;
        $(".select2-chosen").html("");
        $("#assistant").empty();
        $("#assistant").select2("val", "");
        $("#management").empty();
        $("#management").select2("val", "");
        $("#chairmanship").empty();
        $("#chairmanship").select2("val", "");
        $("#department").empty();
        $("#department").select2("val", "");
        $("#employee").empty();
        $("#employee").select2("val", "");
        //Begin of reset form validation
        $(".input-icon .fa-warning").addClass('fa').removeClass('fa-warning');
        $(".input-icon .fa-check").addClass('fa').removeClass('fa-check');
        $(".alert-danger").hide();
        $('.form-group').removeClass('has-error');
        $('.form-group').removeClass('has-success');
        //End of reset form validation
    }
    $('#task_assign').on('hidden.bs.modal', function () {
        clicked = false;
        //resetFormValidation();
        //$("#taskAssignmentForm")[0].reset();
    });

    $("#taskAssignmentTable_filter").after("<div id='dataTables_filter_employee' class='dataTables_filter input-DT hidden'><label>انتخاب کارمند :<select name='employeeId' id='employeeId' class='form-control input-medium'></select></label></div>");

    $("#taskAssignmentTable_filter").after("<div id='dataTables_filter_subSet' class='dataTables_filter input-DT hidden'><label><select name='subSetDepartmentIdDT' id='subSetDepartmentIdDT' class='form-control input-medium'></select></label></div>");

    $("#taskAssignmentTable_filter").after("<div id='departmentIdDT' class='dataTables_filter input-DT'><label>انتخاب رده سازمانی:<select name='departmentId' id='departmentId' class='form-control input-medium'></select></label></div>");

    $("#taskAssignmentTable_filter").after("<div class='dataTables_filter input-DT'><label>انتخاب دوره:<select name='periodDefinitionIdDT' id='periodDefinitionIdDT' class='form-control input---medium'></select></label></div>");

    $("#taskAssignmentTable_filter").after("<div class='clearfix'></div>");

    $.ajax({
        type: 'get',
        url: '/share/GetPeriodDefinitionList',
        //data: { roleId: roleId },
        success: function (periodDefinition) {
            $("#periodDefinitionIdDT").empty();
            //$("#periodDefinitionIdDT").append("<option></option>");
            var max = 0;
            $(periodDefinition).each(function (i, p) {
                //$("#parentName").select2("val", d.departmentId);
                if (p.periodDefinitoionId > max) {
                    max = p.periodDefinitoionId;
                }
                $("#periodDefinitionIdDT").append("<option value='" + p.periodDefinitoionId + "'>" + p.periodTitle + " (" + p.periodCode + ")</option>");
            })
            $("#periodDefinitionIdDT").val(max);
            $('#periodDefinitionIdDT').trigger('change');
        },
        error: function (status) {
            alert("Error");
        }
    })

    $('#periodDefinitionIdDT').on('change', function () {
        $("#dataTables_filter_subSet").addClass("hidden");
        $("#subSetDepartmentIdDT").empty();
        $("#dataTables_filter_employee").addClass("hidden");
        $("#employeeId").empty();
        $("#subSetDepartmentIdDT").append("<option></option>");

        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDepartmentResponsibiltyList',
            data: { periodDefinitionId: $('#periodDefinitionIdDT').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {

                $("#departmentIdDT #departmentId").empty();
                $("#departmentIdDT #departmentId").append("<option></option>");

                $(DepartmentResponsibilty).each(function (i, p) {
                    //$("#parentName").select2("val", d.departmentId);
                    $("#departmentId").append("<option value='" + p.evaluationHierarchyId + "'>" + p.shortName + "</option>");
                    if (p.positionType == 1) {
                        $("#departmentId").val(p.evaluationHierarchyId);
                        $("#departmentId").trigger('change');
                    }
                })
            },
            error: function (status) {
                alert("Error");
            }
        })
    });

    function formatResult(node) {
        var level = 0;
        var $result
        if (node.element !== undefined) {
            level = (node.element.className);
            if (level.trim() !== '') {
                level = (parseFloat(level.match(/\d+/)[0]));
            }

            if (node.element.className == 'level_0' || node.element.className == 'level_1') {
                $result = $('<span style="padding-right:' + (20 * level) + 'px;font-weight: bold;" > ' + node.text + '</span>');
            } else {
                $result = $('<span style="padding-right:' + (20 * level) + 'px;" > ' + node.text + '</span>');

            }
        }


        return $result;
    }
    function buildHierarchy(arry) {

        var roots = [], children = {};

        // find the top level nodes and hash the children based on parent
        for (var i = 0, len = arry.length; i < len; ++i) {
            var item = arry[i],
                p = item.parent,
                target = !p ? roots : (children[p] || (children[p] = []));
            target.push({ value: item });
        }

        // function to recursively build the tree
        var findChildren = function (parent) {
            if (children[parent.value.EvaluationHierarchyId]) {
                parent.children = children[parent.value.EvaluationHierarchyId];
                $(parent.children).each(function (i, p) {
                    //$("<option class='level_" + p.value.Levell + "' value='" + p.value.EvaluationHierarchyId + "'>" + p.value.text + "</option>").insertAfter("#subSetDepartmentIdDT option[value='" + parent.value.EvaluationHierarchyId + "']");
                    if ($("#subSetDepartmentIdDT option[parent='" + p.value.parent + "']:last").length > 0) {
                        $("<option parent=" + parent.value.EvaluationHierarchyId + " class='level_" + p.value.Levell + "' value='" + p.value.EvaluationHierarchyId + "'>" + p.value.text + "</option>").insertAfter("#subSetDepartmentIdDT option[parent='" + p.value.parent + "']:last");
                    } else {
                        $("<option parent=" + parent.value.EvaluationHierarchyId + " class='level_" + p.value.Levell + "' value='" + p.value.EvaluationHierarchyId + "'>" + p.value.text + "</option>").insertAfter("#subSetDepartmentIdDT option[value='" + p.value.parent + "']");
                    }

                })
                for (var i = 0, len = parent.children.length; i < len; ++i) {

                    findChildren(parent.children[i]);
                }
            }
        };

        // enumerate through to handle the case where there are multiple roots
        for (var i = 0, len = roots.length; i < len; ++i) {
            $(roots).each(function (i, p) {
                $("#subSetDepartmentIdDT").append("<option parent=" + p.value.EvaluationHierarchyId + " class='level_" + p.value.Levell + "' value='" + p.value.EvaluationHierarchyId + "'>" + p.value.text + "</option>");
            })
            findChildren(roots[i]);
        }

        return roots;
    }
    $('#departmentId').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == "" && $('#departmentId').children('option:selected').val() != "") {
        //    dt.ajax.url("/AssignTask/GetTaskAssignmentList");
        //    dt.ajax.reload();
        //}
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetSubSetDepartments',
            data: { departmentId: $('#departmentId').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {
                $("#dataTables_filter_subSet").addClass("hidden");
                $("#subSetDepartmentIdDT").empty();
                $("#dataTables_filter_employee").addClass("hidden");
                $("#employeeId").empty();
                $("#subSetDepartmentIdDT").append("<option></option>");
                if (DepartmentResponsibilty.length > 1) {
                    $("#dataTables_filter_subSet").removeClass("hidden");
                    var items = DepartmentResponsibilty;
                    buildHierarchy(items);
                    //$("#subSetDepartmentIdDT option[class='level_0']").attr("disabled", "disabled");
                    $('#subSetDepartmentIdDT').select2({
                        placeholder: "انتخاب واحد زیر مجموعه",
                        allowClear: true,
                        width: "300px",
                        templateResult: formatResult
                    });
                } else if (DepartmentResponsibilty.length == 1) {
                    $("#dataTables_filter_subSet").addClass("hidden");
                    $.ajax({
                        type: 'get',
                        url: '/TaskAssignment/GetDirectEmployees',
                        data: {
                            departmentId: $('#departmentId').children('option:selected').val()
                            , isSupervisor: true
                        },
                        success: function (subSetEmployees) {
                            $("#employeeId").empty();
                            $("#employeeId").append("<option></option>");
                            $(subSetEmployees).each(function (i, p) {
                                $("#employeeId").append("<option value='" + p.PeopleId + "-" + p.EvaluationHierarchyID + "'>" + p.FullName + "</option>");
                            })
                            $("#dataTables_filter_employee").removeClass("hidden");
                        },
                        error: function (status) {
                            alert("Error");
                        }
                    })
                }

            },
            error: function (status) {
                alert("Error");
            }
        })
    });

    $('#subSetDepartmentIdDT').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == "" && $('#departmentId').children('option:selected').val() != "") {
        //    dt.ajax.url("/AssignTask/GetTaskAssignmentList");
        //    dt.ajax.reload();
        //}
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDirectEmployees',
            data: { departmentId: $('#subSetDepartmentIdDT').children('option:selected').val() },
            success: function (subSetEmployees) {
                $("#employeeId").empty();
                $("#employeeId").append("<option></option>");
                $(subSetEmployees).each(function (i, p) {
                    $("#employeeId").append("<option isSupervisor=" + p.IsSupervisor + " value='" + p.PeopleId + "-" + p.EvaluationHierarchyID + "'>" + p.FullName + "</option>");
                })
                $("#employeeId option[issupervisor='true']").css("font-weight", "bold");
                $("#dataTables_filter_employee").removeClass("hidden");
            },
            error: function (status) {
                alert("Error");
            }
        })
    });

    $('#employeeId').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == "" && $('#departmentId').children('option:selected').val() != "") {
        dt.ajax.url("/TaskAssignment/GetAssignedTaskList");
        dt.ajax.reload();
        //}
    })
    $("#reload").click(function () {
        $("#employeeId").val("");
        $("#departmentId").val("");
        dt.ajax.url("/TaskAssignment/GetAssignedTaskList");
        dt.ajax.reload();
        $("#periodDefinitionIdDT").val(null);
        $("#subSetDepartmentIdDT").val("").select2();
        $("#dataTables_filter_employee").addClass("hidden");
        $("#dataTables_filter_subSet").addClass("hidden");
        $("#departmentId").empty();
    })

    $("#taskAssignmentToIndirectBtn").click(function () {
        $.ajax(
            {
                url: "/TaskAssignment/IndirectTaskAssignment",
                contentType: 'aplication/json;charset=utf-8',
                type: "GET",
                datatype: 'html',

                success: function (data, textStatus, jqXHR) {
                    $("#modalPlace").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("erorr");
                    alert(jqXHR);
                    alert(textStatus);
                }
            }).always(function () {

            });
    });
    
    $("#taskAssignmentTransferBtn").click(function () {
        $.ajax(
            {
                url: "/TaskAssignment/TransferTaskAssignment",
                contentType: 'aplication/json;charset=utf-8',
                type: "GET",
                datatype: 'html',

                success: function (data, textStatus, jqXHR) {
                    $("#modalPlace").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("erorr");
                    alert(jqXHR);
                    alert(textStatus);
                }
            }).always(function () {

            });
    });
    $("#weightAssignmentBtn").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != "" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val() != "" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != "" && $('#employeeId').children('option:selected').val() != null) {
            $.ajax(
                {
                    url: "/TaskAssignment/WeightAssignment",
                    contentType: 'aplication/json;charset=utf-8',
                    type: "GET",
                    datatype: 'html',
                    async: false,
                    success: function (data, textStatus, jqXHR) {
                        $("#modalPlace").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("erorr");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert("دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد");
        }
    });
    $(".scoreAssignmentBtn").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != "" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val() != "" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != "" && $('#employeeId').children('option:selected').val() != null) {
            $.ajax(
                {
                    url: "/TaskAssignment/ScoreAssignment",
                    contentType: 'aplication/json;charset=utf-8',
                    type: "GET",
                    datatype: 'html',
                    data: { CoacherType: $(this).attr("coacherType"), Level: dt.data()[0].Levell },
                    success: function (data, textStatus, jqXHR) {
                        $("#modalPlace").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("erorr");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert("دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد");
        }
    });
    $("#renewContract").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != "" && $('#departmentId').children('option:selected').val() != "") {
            $.ajax(
                {
                    url: "/TaskAssignment/RenewContract",
                    contentType: 'aplication/json;charset=utf-8',
                    type: "GET",
                    datatype: 'html',
                    //data: { CoacherType: $(this).attr("coacherType") },
                    success: function (data, textStatus, jqXHR) {
                        $("#modalPlace").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert("erorr");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert("دوره و سمت سازمانی می بایست در حالت انتخاب باشد");
        }
    });
    $("#taskAssignmentTable tbody").on('click', 'tr', function () {
        $(this).toggleClass('selected');
    });
    $("#taskAssignmentBtn").click(function () {
        $.ajax(
            {
                url: "/TaskAssignment/DirectTaskAssignment",
                contentType: 'aplication/json;charset=utf-8',
                type: "GET",
                datatype: 'html',
                //data: { CoacherType: $(this).attr("coacherType") },
                success: function (data, textStatus, jqXHR) {
                    $("#modalPlace").html(data);
                    //this always must have 1  periodDefinitionId
                    $("#periodDefinitionId option:eq(1)").attr("selected", "selected")
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("erorr");
                    alert(jqXHR);
                    alert(textStatus);
                }
            });
    });

    $("#subsetTaskScore").one("click", function () {
        $.ajax(
            {
                //url: "/ProtestAddressee/AddAddresseeResponse",
                //contentType: 'aplication/json;charset=utf-8',
                //type: "GET",
                //datatype: 'html',

                url: '/TaskAssignment/SubSetScorePartial',
                //url : formURL,
                //data: postdata,
                //data: JSON.stringify(ProtestResponse),
                //data: "firstName=" + $("fn").val(),
                //cache: false,
                //contentType: false,
                //processData: false,
                datatype: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'get',

                success: function (data, textStatus, jqXHR) {
                    $("#tab_5_2").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("erorr");
                    alert(jqXHR);
                    alert(textStatus);
                }
            });
    })
</script>
}
