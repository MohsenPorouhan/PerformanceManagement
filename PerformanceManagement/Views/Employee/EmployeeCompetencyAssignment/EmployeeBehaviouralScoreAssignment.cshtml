@{
    Layout = null;
}

<form method="post" id="scoreAssignmentFrm" class="form-horizontal">
    <div class="modal fade department modalClass" id="scoreAssignmentModal" tabindex="" aria-hidden="true">
        <div class="modal-dialog ">
            <div class="modal-content">
                <div class="modal-header bg-blue">
                    <button type="button" id="modal-close" class="close"
                            data-dismiss="modal" aria-hidden="true"></button>
                    <h4 id="sabt_hazine_personnel" class="modal-title">
                        <i class="fa fa-file-o"></i>
                        ثبت نمره عملکردی
                    </h4>
                </div>

                <div class="modal-body">
                    <div class="form-body">

                        <div id="alert_danger" class="alert alert-danger display-hide">
                            <button class="close" data-close="alert"></button>
                            پر کردن فيلدهاي ستاره دار اجباري مي باشد.
                        </div>

                        <div class="alert alert-block alert-info fade in">
                            <button type="button" class="close" data-dismiss="alert"></button>
                            <h4 class="alert-heading">روش نمره دهی</h4>
                            <p id="weightWayInfo">

                            </p>
                        </div>

                        <div id="competencyScoreRow"></div>


                    </div>
                    <!-- END FORM-->
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn green input-sm input-small" id="assignScoreBTN">ذخيره</button>
                    <button type="button" class="btn red input-sm input-small" id="cancel11" data-dismiss="modal"><i class="fa fa-times"></i>انصراف</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
</form>
<script type="text/html" id="appendCompetencyForScore">
    <div class="row">
        <!--/span-->
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label col-md-6">
                    {1} :
                    <span class="required">
                        *
                    </span>
                </label>
                <div class="col-md-6">
                    <div class="input-icon right">
                        <i class="fa"></i>
                        <input type="text" value="{6}" name="competencyScore{0}" id="competencyScore{0}" behaviouralCompetencyId="{2}" evaluationBehaviouralCompetencyId="{3}" periodDefinitionId="{4}" departmentId="{7}" departmentIdR="{8}" recieverIdP="{9}" class="form-control competencyScore input-small input-sm" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    //  $(document).ready(function () {
    var i = 1;
    var index;
    var j = 1;
    var index2;
    var template = jQuery.validator.format($.trim($("#appendCompetencyForScore").html()));
    var finalResult = false;

    var competencyScoreIndex = 0;
    var competencyScore0Value;
    var competencyEvalScore;

    function GetCompetencyEvaluationScore(evaluationBehaviouralCompetencyId, level) {
        $.ajax({
            type: 'get',
            url: '/EmployeeCompetencyAssignment/GetCompetencyEvaluationScore',
            async: false,
            data: { evaluationBehaviouralCompetencyId: evaluationBehaviouralCompetencyId, level: level },
            success: function (data) {
                //console.log(data)
                if (data != null) {
                    competencyEvalScore = data.score;
                } else {
                    competencyEvalScore = null;
                }
            },
            error: function (status) {
                alert("Error");
            }
        })
    }

    var row;
    var length = dt.rows('.selected').data().length;
    var selector;
    if (length > 0) {
        selector = "#CompetencyAssignmentTable >tbody>tr.selected";
    } else {
        selector = "#CompetencyAssignmentTable >tbody>tr";
    }

    $(selector).each(function (i, tr) {
        row = dt.row(tr);
        if (row.data().EvaluationAcceptanceStatusId == 1 || row.data().EvaluationAcceptanceStatusId == 2) {

            GetCompetencyEvaluationScore(row.data().EvaluationBehaviouralCompetencyId, 0);

            index = competencyScoreIndex++;
            $(template(index, row.data().CompetencyTitle, row.data().BehaviouralCompetencyId, row.data().EvaluationBehaviouralCompetencyId, row.data().PeriodDefinitoionId, row.data().Levell - 1, competencyEvalScore == null ? '' : competencyEvalScore, row.data().AllocatorEvaluationBehaviouralHierarchyId, row.data().RecieverAllocationEvaluationBehaviouralHierarchyId, row.data().RecieverAllocationPersonId)).appendTo("#competencyScoreRow");

            finalResult = true;
        }
    })
    if (!finalResult) {
        alert("شایستگی های رفتاری را که وضعیت آن در حالت تفاهم یا دستوری باشد را مجاز به نمره دهی می باشید.");
    } else if (finalResult) {
        var weightWay = "";
        var numberScaleList = [];
        $.ajax({
            type: 'get',
            url: '/Share/GetScoreWeightWay',
            data: { periodDefinitionId: row.data().PeriodDefinitoionId },
            async: false,
            success: function (data) {
                weightWay = data;
                if (data == 1) {
                    $("#weightWayInfo").html("نمره دهی به صورت درصدی و بازه مجاز از 1 تا 100 می باشد.");
                } else if (data == 2) {
                    $.ajax({
                        type: 'get',
                        url: '/Share/GetScoreLikertScale',
                        data: { periodDefinitionId: row.data().PeriodDefinitoionId },
                        async: false,
                        success: function (data) {
                            $("#weightWayInfo").html("نمره دهی به صورت طیف لیکرت می باشد. و بازه های مجاز جهت نمره دهی ");
                            $(data).each(function (i, d) {
                                numberScaleList.push(d.numberScale);
                                $("#weightWayInfo").append(d.numberScale + ":" + d.titleScale + "  ");
                            });
                        },
                        error: function (status) {
                            alert("Error");
                        }
                    })
                }
            },
            error: function (status) {
                alert("Error");
            }
        })

        $('#scoreAssignmentModal').modal('show');

        $('.modalClass .select2').select2({
            placeholder: "انتخاب کنید",
            allowClear: true
        });

        $("#assignScoreBTN").click(function () {
            //alert('dpCreationSubmit');
            //var postdata2 = $(this).serializeArray();
            var form = $("#scoreAssignmentFrm");
            form.validate({
                //console.log($('#registerform').serializeArray());
                errorElement: 'span', //default input error message container
                errorClass: 'help-block', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: "",
                rules: {
                    competencyScore0: {
                        required: true,
                    }
                },
                messages: {
                    competencyScore0: {
                        required: "پر کردن این فیلد الزامی می باشد"
                    }
                },
                invalidHandler: function (event, validator) { //display error alert on form submit
                    //                    success2.hide();
                    //                    error2.show();
                    //                    App.scrollTo(error2, -200);
                },
                errorPlacement: function (error, element) { // render error placement for each input type
                    var icon = $(element).parent('.input-icon').children('i');
                    icon.removeClass('fa-check').addClass("fa-warning");
                    icon.attr("data-original-title", error.text()).tooltip();
                },
                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight

                },

                success: function (label, element) {
                    var icon = $(element).parent('.input-icon').children('i');
                    $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                    icon.removeClass("fa-warning").addClass("fa-check");
                },

                submitHandler: function (form) {
                    //                    success2.show();
                    //                    error2.hide();
                }
            })
            if (form.valid() == false) {
                //console.log($('#registerform').serializeArray());

                return false;
            } else {
                var listOfEvaluation = [];
                var coacherLavel = -1;
                $("#competencyScoreRow input[type=text]").each(function () {
                    var EvaluationCompetencyView = {};
                    EvaluationCompetencyView.BehaviouralCompetencyId = $(this).attr("behaviouralCompetencyId");
                    EvaluationCompetencyView.CompetencyScore = $(this).val();
                    EvaluationCompetencyView.CoacherLevel = coacherLavel;
                    EvaluationCompetencyView.EvaluationBehaviouralCompetencyId = $(this).attr("evaluationBehaviouralCompetencyId");
                    EvaluationCompetencyView.PeriodDefinitionId = $(this).attr("periodDefinitionId");
                    EvaluationCompetencyView.AllocatorDepartmentId = $(this).attr("departmentId") == "null" ? null : $(this).attr("departmentId");
                    EvaluationCompetencyView.RecieverAllocationEvaluationBehaviouralHierarchyId = $(this).attr("departmentIdR");
                    EvaluationCompetencyView.RecieverAllocationPersonId = $(this).attr("recieverIdP");
                    listOfEvaluation.push(EvaluationCompetencyView);
                });
                console.log(listOfEvaluation);
                //$("#articleSubmit").addClass('disabled');
                // $("#dpCreationSubmit").attr("disabled", "disabled");
                var btn = $("#assignScoreBTN");
                btn.button('loading');
                //var postdata = new FormData(this);
                //var postdata = $('#scoreAssignmentFrm').serializeArray();

                //console.log(postdata);


                $.ajax(
                    {
                        datatype: "json",
                        //data:postdata,
                        url: "/EmployeeCompetencyAssignment/BehaviouralScoreAssignment",
                        //url : formURL,
                        //                        data: postdata2,
                        data: JSON.stringify(listOfEvaluation),
                        //data: "firstName=" + $("fn").val(),
                        //cache: false,
                        contentType: 'application/json; charset=utf-8',
                        //contentType: false,
                        //processData: false,
                        type: "POST",

                        success: function (data, textStatus, jqXHR) {
                            //if ($.trim(data) === "yess")
                            //i = 1;
                            //j = 1;
                            if (data.giveWeight != null) {
                                toastr.options.timeOut = "15000";
                                toastr.options.positionClass = "toast-top-center";
                                toastr.info(data.giveWeight);
                            } else if (data.result > 0) {
                                //$("#dpcreation")[0].reset();
                                $("#scoreAssignmentModal").modal("hide");
                                dt.ajax.url("/EmployeeCompetencyAssignment/GetAssignedCompetencyList");
                                dt.ajax.reload();
                                //resetFormValidation();
                                toastr.options.timeOut = "15000";
                                toastr.options.positionClass = "toast-top-center";
                                toastr.success("اطلاعات مورد نظر با موفقیت ثبت گردید.");
                            } else if (data.result == 0) {
                                toastr.options.timeOut = "15000";
                                toastr.options.positionClass = "toast-top-center";
                                toastr.error("اطلاعات مورد نظر ثبت نگردید.");
                            } else {
                                toastr.options.timeOut = "15000";
                                toastr.options.positionClass = "toast-top-center";
                                toastr.info(data.result);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("erorr");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    }).always(function () {
                        $("#assignScoreBTN").button('reset');
                    });



                //$.getScript('/assets/javascript/articleForm.js', function () {
                //    ArticleForm.init(postdata);
                //    $("#articleForm")[0].reset();
                //});
                // e.preventDefault(e);
            }
        });
        //Begin of validation of form
        competencyScore0Value = $("#competencyScore0").val();
        $("#competencyScore0").val('');
        $("#assignScoreBTN").trigger('click');

        $('.competencyScore').each(function (i, d) {
            $(this).rules("add", {
                required: true,
                messages: {
                    required: "پرکردن این فیلد الزامی می باشد",
                }
            });
            $(this).rules("add", {
                number: true,
                messages: {
                    number: "لطفا عدد وارد نمایید",
                }
            });
            if (weightWay == 1) {
                $(d).rules("add", {
                    range: [1, 100],
                    messages: {
                        range: "لطفا عددی بین 1 تا 100 وارد نمایید",
                    }
                });
            } else if (weightWay == 2) {
                $(this).rules("add", {
                    range: [Math.min.apply(Math, numberScaleList), Math.max.apply(Math, numberScaleList)],
                    messages: {
                        range: "لطفا عددی بین " + Math.min.apply(Math, numberScaleList) + " تا " + Math.max.apply(Math, numberScaleList) + " وارد نمایید",
                    }
                });
            }
        });

        $("#assignScoreBTN").trigger('click');
        $("#competencyScore0").val(competencyScore0Value);

        //End of validation of form
        //});
    }
</script>