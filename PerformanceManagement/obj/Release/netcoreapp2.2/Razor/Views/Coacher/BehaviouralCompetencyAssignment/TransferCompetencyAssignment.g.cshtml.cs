#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\TransferCompetencyAssignment.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d8d43efb650597cf02f6457c35e82a754a627b75"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_TransferCompetencyAssignment), @"mvc.1.0.view", @"/Views/Coacher/BehaviouralCompetencyAssignment/TransferCompetencyAssignment.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/BehaviouralCompetencyAssignment/TransferCompetencyAssignment.cshtml", typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_TransferCompetencyAssignment))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8d43efb650597cf02f6457c35e82a754a627b75", @"/Views/Coacher/BehaviouralCompetencyAssignment/TransferCompetencyAssignment.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_BehaviouralCompetencyAssignment_TransferCompetencyAssignment : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.SingleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("transferCompetencyAssignmentForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\TransferCompetencyAssignment.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(29, 9271, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b756941", async() => {
                BeginContext(111, 4189, true);
                WriteLiteral(@"
    <div class=""modal fade"" id=""competencyTransfer_assign"" aria-hidden=""true"" data-backdrop=""static"">
        <div class=""modal-dialog modal-wide"">
            <div class=""modal-content"">
                <div class=""modal-header bg-blue"">
                    <button type=""button"" id=""modal-close"" class=""close""
                            data-dismiss=""modal"" aria-hidden=""true""></button>
                    <h4 class=""modal-title"">
                        <i class=""fa fa-file-o""></i>
                        انتقال تفاهمات (شایستگی ها) از دوره قبل به دوره جاری
                    </h4>
                </div>
                <input type=""hidden"" id=""validationRun"" name=""validationRun"" />
                <div class=""modal-body"">
                    <!-- BEGIN FORM-->
                    <div class=""form-body"">
                        <div id=""alert_danger"" class=""alert alert-danger display-hide"">
                            <button class=""close"" data-close=""alert""></button>
                    ");
                WriteLiteral(@"        <span></span><br />
                            پر کردن فيلدهاي ستاره دار یا قرمز رنگ اجباري مي باشد.
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label id=""mojri_name_label"" class=""control-label col-md-3"">
                                        انتخاب مسئولیت واحد سازمانی
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""departmentSupervisor"" id=""departmentSupervisor"" class=""form-control input-medium""></select>
      ");
                WriteLiteral(@"                                  </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <!--/span-->
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب معاونت
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""assistant"" id=""assistant"" class=""select2 se");
                WriteLiteral(@"lect2-2 form-control input-medium"" multiple></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب مدیریت
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""management"" id=""management""
                                                    class=""select2 sel");
                WriteLiteral("ect2-2 form-control input-medium\" multiple>\r\n                                                ");
                EndContext();
                BeginContext(4300, 17, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7511769", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4317, 50, true);
                WriteLiteral("\r\n                                                ");
                EndContext();
                BeginContext(4367, 30, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7512944", async() => {
                    BeginContext(4385, 3, true);
                    WriteLiteral("همه");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4397, 50, true);
                WriteLiteral("\r\n                                                ");
                EndContext();
                BeginContext(4447, 35, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7514455", async() => {
                    BeginContext(4466, 7, true);
                    WriteLiteral("هیچکدام");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4482, 1302, true);
                WriteLiteral(@"
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--/span-->
                        </div>
                        <div class=""row"">
                            <!--/span-->
                            <div id=""chairmanshipDiv"" class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب ریاست
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                        ");
                WriteLiteral(@"    <i class=""fa""></i>
                                            <select name=""chairmanship"" id=""chairmanship""
                                                    class=""select2 select2-2 form-control input-medium"" multiple>
                                                ");
                EndContext();
                BeginContext(5784, 17, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7517283", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(5801, 50, true);
                WriteLiteral("\r\n                                                ");
                EndContext();
                BeginContext(5851, 30, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7518458", async() => {
                    BeginContext(5869, 3, true);
                    WriteLiteral("همه");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(5881, 50, true);
                WriteLiteral("\r\n                                                ");
                EndContext();
                BeginContext(5931, 35, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7519969", async() => {
                    BeginContext(5950, 7, true);
                    WriteLiteral("هیچکدام");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(5966, 2245, true);
                WriteLiteral(@"
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id=""departmentDiv"" class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب واحد
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""department"" id=""department""
                                                   ");
                WriteLiteral(@" class=""select2 select2-2 form-control input-medium"" multiple></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--/span-->
                        </div>
                        <div class=""row"">
                            <div id=""employeeDiv"" class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب کارمند/کارمندان
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></");
                WriteLiteral("i>\r\n                                            <select name=\"employee\" id=\"employee\" class=\"form-control select2 select2-2 input-medium\" multiple>\r\n                                                ");
                EndContext();
                BeginContext(8211, 17, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7523801", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(8228, 50, true);
                WriteLiteral("\r\n                                                ");
                EndContext();
                BeginContext(8278, 30, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d8d43efb650597cf02f6457c35e82a754a627b7524976", async() => {
                    BeginContext(8296, 3, true);
                    WriteLiteral("همه");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(8308, 985, true);
                WriteLiteral(@"
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--/span-->
                            <!--/span-->
                        </div>
                        <!--/row-->
                    </div>
                    <!-- END FORM-->


                </div>
                <div class=""modal-footer"">
                    <button type=""submit"" class=""btn green input-sm input-small"" id=""saveCompetencyAssignment"">ذخيره</button>
                    <button type=""button"" class=""btn red input-sm input-small"" id=""cancel"" data-dismiss=""modal""><i class=""fa fa-times""></i>انصراف</button>
                </div>

            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div id=""critriaPlaceHolder""></div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(9300, 18923, true);
            WriteLiteral(@"

<script>
    $(""#competencyTransfer_assign"").modal(""show"");
    $('.select2-2').select2({
        placeholder: ""انتخاب کنید"",
        allowClear: true
    });
    var clicked = false;
    //$(""#taskAssignmentBtn"").click(function () {
    $.ajax({
        type: 'get',
        url: '/TaskAssignment/GetDepartmentSupervisorList',
        async: false,
        //data: { roleId: roleId },
        success: function (department) {
            $(""#departmentSupervisor"").empty();
            $(""#departmentSupervisor"").append(""<option></option>"");

            $(department).each(function (i, d) {
                //$(""#parentName"").select2(""val"", d.departmentId);
                var hasPrimaryPosition = false;
                if (d.PositionType == 1) {
                    hasPrimaryPosition = true;
                    $(""#departmentSupervisor"").append(""<option selected value='"" + d.EvaluationHierarchyId + ""-"" + d.Levell + ""'>"" + d.ShortName + ""</option>"");
                } else {
            ");
            WriteLiteral(@"        $(""#departmentSupervisor"").append(""<option value='"" + d.EvaluationHierarchyId + ""-"" + d.Levell + ""'>"" + d.ShortName + ""</option>"");
                }
                if (!hasPrimaryPosition) {
                    $(""#departmentSupervisor"").val($('#departmentSupervisor').children('option').first().next().val());
                }
            })
        },
        error: function (status) {
            alert(""Error"");
        }
    })
    //$(""#saveCompetencyAssignment"").trigger(""click"");
    //   clicked = true;
    //})
    $('#departmentSupervisor').on('change', function () {
        $(""#management"").rules(""add"", {
            required: false
        });
        $(""#chairmanship"").rules(""add"", {
            required: false
        });
        $(""#department"").rules(""add"", {
            required: false
        });
        $(""#employee"").rules(""add"", {
            required: false
        });
        var arr = $('#departmentSupervisor').children('option:selected').val().split(");
            WriteLiteral(@"""-"");
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetParentDepartmentList',
            data: { departmentId: arr[0], level: arr[1] },
            async: false,
            success: function (data) {
                var haveManagement = false;
                var havechairmanship = false;
                var haveDepartment = false;
                $(""#assistant"").empty();
                $(""#assistant"").removeAttr(""disabled"", ""disabled"");
                $(""#assistant"").select2(""val"", """");
                $(""#management"").empty();
                $(""#management"").removeAttr(""disabled"", ""disabled"");
                $(""#management"").select2(""val"", """");
                $(""#chairmanship"").empty();
                $(""#chairmanship"").removeAttr(""disabled"", ""disabled"");
                $(""#chairmanship"").select2(""val"", """");
                $(""#department"").empty();
                $(""#department"").removeAttr(""disabled"", ""disabled"");
                $(""#department""");
            WriteLiteral(@").select2(""val"", """");

                $(""#chairmanshipDiv"").removeClass(""hidden"");
                $(""#departmentDiv"").removeClass(""hidden"");
                $(""#employeeDiv"").removeClass(""hidden"");
                $(data).each(function (i, d) {
                    if (d.Levell == 0) {
                        $(""#assistant"").append(""<option value='"" + d.id + ""'>"" + d.text + ""</option>"");
                        //$(""#assistant"").select2(""val"", d.id);
                        $(""#assistant"").val(d.id).select2();
                        $(""#assistant"").attr(""disabled"", ""disabled"");
                        $(""#management"").rules(""add"", {
                            required: true,
                            messages: {
                                required: ""پرکردن این فیلد الزامی می باشد"",
                            }
                        });
                    }
                    if (d.Levell == 1) {
                        $(""#assistant"").append(""<option value='"" + d.id + ""'>"" + ");
            WriteLiteral(@"d.text + ""</option>"");
                        //$(""#assistant"").select2(""val"", d.id);
                        $(""#assistant"").val(d.id).select2();
                        $(""#assistant"").attr(""disabled"", ""disabled"");
                        $(""#management"").rules(""add"", {
                            required: true,
                            messages: {
                                required: ""پرکردن این فیلد الزامی می باشد"",
                            }
                        });
                    }
                    if (d.Levell == 2) {
                        $(""#management"").append(""<option value='"" + d.id + ""'>"" + d.text + ""</option>"");
                        //$(""#management"").select2(""val"", d.id);
                        $(""#management"").val(d.id).select2();
                        $(""#management"").attr(""disabled"", ""disabled"");
                        haveManagement = true;
                        $(""#chairmanship"").rules(""add"", {
                            required: true,");
            WriteLiteral(@"
                            messages: {
                                required: ""پرکردن این فیلد الزامی می باشد"",
                            }
                        });
                    }
                    if (d.Levell == 3) {
                        $(""#chairmanship"").append(""<option value='"" + d.id + ""'>"" + d.text + ""</option>"");
                        //$(""#chairmanship"").select2(""val"", d.id);
                        $(""#chairmanship"").val(d.id).select2();

                        $(""#chairmanship"").attr(""disabled"", ""disabled"");
                        havechairmanship = true;
                        $(""#department"").rules(""add"", {
                            required: true,
                            messages: {
                                required: ""پرکردن این فیلد الزامی می باشد"",
                            }
                        });
                    }
                    if (d.Levell == 4) {
                        $(""#department"").append(""<option value='"" +");
            WriteLiteral(@" d.id + ""'>"" + d.text + ""</option>"");
                        //$(""#department"").select2(""val"", d.id);
                        $(""#department"").val(d.id).select2();

                        $(""#department"").attr(""disabled"", ""disabled"");
                        haveDepartment = true;
                        $(""#employee"").rules(""add"", {
                            required: true,
                            messages: {
                                required: ""پرکردن این فیلد الزامی می باشد"",
                            }
                        });
                    }
                })
                if (!haveManagement) {
                    $(""#chairmanshipDiv"").addClass(""hidden"");
                    $(""#departmentDiv"").addClass(""hidden"");
                    $(""#employeeDiv"").addClass(""hidden"");
                }
                if (!havechairmanship) {
                    $(""#departmentDiv"").addClass(""hidden"");
                    $(""#employeeDiv"").addClass(""hidden"");
         ");
            WriteLiteral(@"       }
                if (!haveDepartment) {
                    $(""#employeeDiv"").addClass(""hidden"");
                }
            },
            error: function (status) {
                alert(""Error"");
            }
        })

        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDirectEmployee',
            data:
            {
                departmentId: arr[0]
                //, level: arr[1]
            },
            success: function (data) {
                if (arr[1] == 0) {
                    $(""#management"").empty();
                    $(""#management"").select2(""val"", """");
                    $(data).each(function (i, d) {
                        $(""#management"").append(""<option value='"" + d.PeopleId + ""-"" + d.EvaluationHierarchyId + ""'>"" + d.fullname + ""</option>"");
                    });
                }
                if (arr[1] == 1) {
                    $(""#management"").empty();
                    $(""#management"").select2(""va");
            WriteLiteral(@"l"", """");
                    $(data).each(function (i, d) {
                        $(""#management"").append(""<option value='"" + d.PeopleId + ""-"" + d.EvaluationHierarchyId + ""'>"" + d.fullname + ""</option>"");
                    });
                }
                if (arr[1] == 2) {
                    $(""#chairmanship"").empty();
                    $(""#chairmanship"").select2(""val"", """");
                    $(data).each(function (i, d) {
                        $(""#chairmanship"").append(""<option value='"" + d.PeopleId + ""-"" + d.EvaluationHierarchyId + ""'>"" + d.fullname + ""</option>"");
                    });
                }
                if (arr[1] == 3) {
                    $(""#department"").empty();
                    $(""#department"").select2(""val"", """");
                    $(data).each(function (i, d) {
                        $(""#department"").append(""<option value='"" + d.PeopleId + ""-"" + d.EvaluationHierarchyId + ""'>"" + d.fullname + ""</option>"");
                    });
             ");
            WriteLiteral(@"   }
                if (arr[1] == 4) {
                    $(""#employee"").empty();
                    $(""#employee"").select2(""val"", """");
                    $(data).each(function (i, d) {
                        $(""#employee"").append(""<option value='"" + d.PeopleId + ""-"" + d.EvaluationHierarchyId + ""'>"" + d.fullname + ""</option>"");
                    });
                }
            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    $(""#transferCompetencyAssignmentForm"").submit(function (e) {
        var form = $('#transferCompetencyAssignmentForm');
        var error2 = $('.alert-danger', form);
        var success2 = $('.alert-success', form);

        form.validate({
            //console.log($('#registerform').serializeArray());
            errorElement: 'span', //default input error message container
            errorClass: 'help-block', // default input error message class
            focusInvalid: false, // do not f");
            WriteLiteral(@"ocus the last invalid input
            ignore: """",
            rules: {
                departmentSupervisor: {
                    required: true
                },
                validationRun: {
                    required:true
                }
            },
            messages: {
                departmentSupervisor: {
                    required: ""پر کردن این فیلد الزامی می باشد""
                }
            },
            invalidHandler: function (event, validator) { //display error alert on form submit
                success2.hide();
                error2.show();
                App.scrollTo(error2, -200);
            },
            errorPlacement: function (error, element) { // render error placement for each input type
                var icon = $(element).parent('.input-icon').children('i');
                icon.removeClass('fa-check').addClass(""fa-warning"");
                icon.attr(""data-original-title"", error.text()).tooltip();
            },
            highli");
            WriteLiteral(@"ght: function (element) { // hightlight error inputs
                $(element)
                    .closest('.form-group').addClass('has-error'); // set error class to the control group
            },

            unhighlight: function (element) { // revert the change done by hightlight

            },
            showErrors: function (errorMap, errorList) {
                var errors = this.numberOfInvalids();
                if (errors) {
                    var message = errors == 1
                        ? 'فرم مورد نظر 1 خطا دارد '
                        : 'فرم مورد نظر ' + errors + ' خطا دارد.'
                    message = message + ' لطفا خطا/خطاها را رفع نمایید '
                    $("".alert-danger span "").empty().html(message);
                    error2.show();
                    //console.log(errorList)
                    //console.log(errorMap)
                    //$(errorList).each(function (i, d) {
                    //    console.log(d.message)
                    ");
            WriteLiteral(@"//})
                } else {
                    error2.hide();
                }
                this.defaultShowErrors();
            },
            success: function (label, element) {
                var icon = $(element).parent('.input-icon').children('i');
                $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                icon.removeClass(""fa-warning"").addClass(""fa-check"");
            },

            submitHandler: function (form) {
                success2.show();
                error2.hide();
            }
        })
        if (form.valid() == false) {
            //console.log($('#registerform').serializeArray());
            return false;
        } else {

            var CoveredEmployee = {};
            var listOfTextTask = [];
 
            CoveredEmployee.AllocatorDepartmentId = $(""#departmentSupervisor"").val().split(""-"")[0];
            if ($(""#management"").attr(""disabled"") !");
            WriteLiteral(@"= ""disabled"") {
                CoveredEmployee.Receiver = $(""#management"").val();
            } else if ($(""#chairmanship"").attr(""disabled"") != ""disabled"") {
                CoveredEmployee.Receiver = $(""#chairmanship"").val();
            } else if ($(""#department"").attr(""disabled"") != ""disabled"") {
                CoveredEmployee.Receiver = $(""#department"").val();
            } else if ($(""#employee"").attr(""disabled"") != ""disabled"") {
                CoveredEmployee.Receiver = $(""#employee"").val();
            }

            console.log(CoveredEmployee);
            //$(""#articleSubmit"").addClass('disabled');
            $(""#saveCompetencyAssignment"").attr(""disabled"", ""disabled"");
            var btn = $(""#saveCompetencyAssignment"");
            btn.button('loading');
            //var postdata = new FormData(this);
            //listOfSubTask = JSON.stringify(listOfSubTask);
            //var postdata = $(this).serializeArray();
            //postdata.append(JSON.stringify(listOfSubTask))");
            WriteLiteral(@";
            //console.log(postdata);
            $.ajax(
                {
                    //data:postdata,
                    url: '/BehaviouralCompetencyAssignment/TransferCompetencyAssignment',
                    //url : formURL,
                    //data: postdata,
                    data: JSON.stringify(CoveredEmployee),
                    //data: ""firstName="" + $(""fn"").val(),
                    //cache: false,
                    //contentType: false,
                    //processData: false,
                    datatype: 'json',
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',

                    success: function (data, textStatus, jqXHR) {
                        var message = """";
                        var duplicate = """";
                        if (data.result > 0) {
                            message += ""<span>  .تفاهمات مورد نظر با موفقیت انتقال یافت</span><br><br>"";
                            toastr.option");
            WriteLiteral(@"s.timeOut = ""15000"";
                            toastr.options.positionClass = ""toast-top-center"";
                            toastr.success(message);
                            dt.ajax.url(""/BehaviouralCompetencyAssignment/GetAssignedCompetencyList"");
                            dt.ajax.reload();
                            $(""#transferCompetencyAssignmentForm"")[0].reset();
                            $(""#competencyTransfer_assign"").modal(""hide"");
                        }
                        else if (data.result == 0) {
                            message += ""<span>اطلاعات  مورد نظر ثبت نگردید..</span><br><br>"";
                            toastr.options.timeOut = ""15000"";
                            toastr.options.positionClass = ""toast-top-center"";
                            toastr.info(message);
                        }
                        else if (data.hasOwnProperty(""criteriarestriction"")) {
                            message = data.criteriarestriction;
                   ");
            WriteLiteral(@"         toastr.options.timeout = ""15000"";
                            toastr.options.positionclass = ""toast-top-center"";
                            toastr.info(message);
                        }
                        else if (data.hasOwnProperty(""exception"")) {
                            message = data.exception;
                            toastr.options.timeout = ""15000"";
                            toastr.options.positionclass = ""toast-top-center"";
                            toastr.info(message);
                        }
                        if (data.hasOwnProperty(""duplicate"")) {
                            $(data.duplicate).each(function (i, m) {
                                duplicate += ""<span> جلوگیری از انتقال مجدد تفاهم تکراری:  "" + m + ""  </span><br><br>"";
                            })
                            toastr.options.timeOut = ""15000"";
                            toastr.options.positionClass = ""toast-top-center"";
                            toastr.info(dupli");
            WriteLiteral(@"cate);
                        }
                        if (data.hasOwnProperty(""notAuthorized"") && data.notAuthorized == ""true"") {
                            message = ""کاربر گرامی جهت تخصیص با سمت سازمانی مورد نظر در بازه زمانی مجاز اقدام نمایید."";
                            toastr.options.timeOut = ""15000"";
                            toastr.options.positionClass = ""toast-top-center"";
                            toastr.info(message);
                        }

                        //resetFormValidation();

                        //$(""#periodDefinitionTable"").DataTable().destroy();
                        //show_dataTable();
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(""erorr00000"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                }).always(function () {
                    $(""#saveCompetencyAssignment"").button('reset');
           ");
            WriteLiteral(@"     });
            //$.getScript('/assets/javascript/articleForm.js', function () {
            //    ArticleForm.init(postdata);
            //    $(""#articleForm"")[0].reset();
            //});
            e.preventDefault(e);
        }
    });

    $(""#saveCompetencyAssignment"").trigger(""click"");
    clicked = true;

    $('#departmentSupervisor').trigger('change');
    //validation config
    $(""#validationRun"").val(""setToPass"");
    //validation config
</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
