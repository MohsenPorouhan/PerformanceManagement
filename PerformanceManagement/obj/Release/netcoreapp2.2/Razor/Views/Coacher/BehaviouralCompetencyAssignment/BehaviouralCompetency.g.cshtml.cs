#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\BehaviouralCompetency.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a05ce08c751a45c1af1346f7afee837dab8bfd3f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetency), @"mvc.1.0.view", @"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetency.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetency.cshtml", typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetency))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a05ce08c751a45c1af1346f7afee837dab8bfd3f", @"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetency.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetency : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\BehaviouralCompetency.cshtml"
  
    ViewData["Title"] = "اختصاص شایستگی های رفتاری به نفرات";

#line default
#line hidden
            DefineSection("Styles", async() => {
                BeginContext(86, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(207, 106, true);
                WriteLiteral("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/plugins/bootstrap-toastr/toastr-rtl.min.css\" />\r\n");
                EndContext();
                BeginContext(411, 109, true);
                WriteLiteral("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/plugins/select2v4/select2/dist/css/select2.css\" />\r\n");
                EndContext();
                BeginContext(886, 1908, true);
                WriteLiteral(@"    <link rel=""stylesheet"" href=""/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.css"" />

    <link rel=""stylesheet"" href=""/assets/advancedDataTable/jquery.dataTables.css"" />
    <link rel=""stylesheet"" href=""/assets/advancedDataTable/buttons.dataTables.css"" />
    <style>
        .tag-editor li {
            float: right;
        }

        .input-icon.right i {
            right: auto !important;
        }

        .tag-editor {
            line-height: 27px;
            /*max-width: 300px;*/
            overflow: auto;
        }

        .btn-sm, .btn-xs {
            margin: 2px;
        }

        td.details-control {
            background: url('/assets/img/details_open.png') no-repeat center center;
            cursor: pointer;
        }

        tr.details td.details-control {
            background: url('/assets/img/details_close.png') no-repeat center center;
        }

        .dataTable .details td, .dataTable .details th {
            padding: 8px;
     ");
                WriteLiteral(@"       background: none;
            border: 0;
        }

        .input-DT {
            margin-left: 5px;
        }

        .select2-container .select2-choice > .select2-chosen {
            /*display: block;*/
            overflow: initial;
        }

        .btn-add, .h3-section {
            margin-right: 10px !important;
        }

        .input-icon.right i {
            z-index: +100;
        }

        .select2-container--open .select2-dropdown {
            z-index: 99999999
        }

        #dataTables_filter_subSet {
            margin-top: 32px;
        }
        /*generated dynamically in textTaskIndirect and because of bug had set width*/
        #participantt2Select21 {
            width: 176px;
        }

        table.dataTable tbody tr.selected td {
            background-color: #B0BED9;
        }
    </style>
");
                EndContext();
            }
            );
            BeginContext(2797, 3754, true);
            WriteLiteral(@"<!-- BEGIN PAGE HEADER-->
<div class=""row"">
    <div class=""col-md-12"">
        <!-- BEGIN PAGE TITLE & BREADCRUMB-->
        <h3 class=""page-title"">
            <small></small>

        </h3>
        <div class=""clearfix""></div>
        <ul class=""page-breadcrumb breadcrumb"">
            <li>
                <i class=""fa fa-home""></i>
                <a href=""/home"">
                    خانه
                </a>
                <i class=""fa fa-angle-left""></i>
            </li>
            <li>
                <a href=""#"">
                    مسیر مورد نظر
                </a>
            </li>
            <li class=""pull-right"">
                <div id=""dashboard-report-range"" class=""dashboard-date-range tooltips"" data-placement=""top"" data-original-title=""Change dashboard date range"">
                    <i class=""fa fa-calendar""></i>
                    <span>
                    </span>
                    <i class=""fa fa-angle-down""></i>
                </div>
            </l");
            WriteLiteral(@"i>
        </ul>
        <!-- END PAGE TITLE & BREADCRUMB-->
    </div>
</div>
<!-- END PAGE HEADER-->

<div class=""modal fade"" id=""view_subtasks"" tabindex="""" role=""dialog"" aria-labelledby=""myModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-wide"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true""></button>
                <h4 class=""modal-title"">مشاهده زیر فعالیت ها</h4>
            </div>
            <div class=""modal-body"">
                <h3>پس از ثبت زیرفعالیت های تقسیم شده و شاخص هایشان، در اینجا نمایش داده می شوند.</h3>
            </div>
            <div class=""modal-footer"">
                <!--<button type=""button"" class=""btn blue"">ذخیره</button>-->
                <button type=""button"" class=""btn default"" data-dismiss=""modal"">بستن</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog --");
            WriteLiteral(@">
</div>
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""portlet blue box"">
            <div class=""portlet-title"">
                <div class=""caption"">
                    <i class=""fa fa-cogs""></i>اختصاص شایستگی های رفتاری به نفرات
                </div>
                <div class=""tools"">
                    <a href=""javascript:;"" class=""collapse"">
                    </a>
                    <a href=""#portlet-config"" data-toggle=""modal"" class=""config"">
                    </a>
                    <a href=""javascript:;"" id=""reload"" class=""reload"">
                    </a>
                    <a href=""javascript:;"" class=""remove"">
                    </a>
                </div>
            </div>
            <div class=""portlet-body"">
                <div class=""btn-group"">
                    <button type=""button"" class=""btn blue btn-sm dropdown-toggle"" data-toggle=""dropdown"" data-hover=""dropdown"" data-delay=""1000"" data-close-others=""true"">
                        ");
            WriteLiteral(@" شایستگی رفتاری
                        <i class=""fa fa-angle-down""></i>
                    </button>
                    <ul class=""dropdown-menu"" role=""menu"">
                        <li>
                            <a id=""BehaviouralCompetencyAssignmentBtn"" data-toggle=""modal"">
                                اختصاص
                            </a>
                        </li>
                        <li>
                            <a id=""competencyTransitionBtn"" data-toggle=""modal"">
                                انتقال تفاهمات از دوره قبل
                            </a>
                        </li>
                    </ul>
                </div>
");
            EndContext();
            BeginContext(6695, 222, true);
            WriteLiteral("                <div class=\"btn-group\">\r\n                    <a id=\"BehaviouralWeightAssignmentBtn\" class=\"btn blue btn-sm pull-left\" data-toggle=\"modal\">تخصیص وزن به شایستگی کارمند انتخاب شده</a>\r\n                </div>\r\n");
            EndContext();
            BeginContext(7059, 2434, true);
            WriteLiteral(@"                <div class=""btn-group"">
                    <a id=""renewCompetencyContract"" class=""btn blue btn-sm pull-left"" data-toggle=""modal"">تغییر وضعیت تفاهم</a>
                </div>
                <div class=""btn-group"">
                    <button type=""button"" class=""btn blue btn-sm dropdown-toggle"" data-toggle=""dropdown"" data-hover=""dropdown"" data-delay=""1000"" data-close-others=""true"">
                        نمره دهی به شایستگی کارمند انتخاب شده
                        <i class=""fa fa-angle-down""></i>
                    </button>
                    <ul class=""dropdown-menu"" role=""menu"">
                        <li>
                            <a class=""competencyScoreAssignmentBtn"" coacherType=""1"">
                                به عنوان مربی سطح 1 / سطح 2
                            </a>
                        </li>
                        <li>
                            <a class=""competencyScoreAssignmentBtn"" coacherType=""2"">
                                به عنوان مربی ف");
            WriteLiteral(@"رعی (اختصاص غیرمستقیم)
                            </a>
                        </li>
                    </ul>
                </div>

                <div class=""clearfix"">
                </div>
                <table class=""table table-striped table-bordered table-hover"" id=""competencyAssignmentTable"">
                    <thead>
                        <tr>
                            <th>
                                کد دوره
                            </th>
                            <th>
                                نام دوره
                            </th>
                            <th>
                                نام اختصاص دهنده
                            </th>
                            <th>
                                واحد اختصاص دهنده
                            </th>
                            <th>
                                نقش تخصیص دهنده
                            </th>
                            <th>
                                نام ");
            WriteLiteral(@"گیرنده
                            </th>
                            <th>
                                عنوان شایستگی رفتاری
                            </th>
                            <th>
                                وزن
                            </th>
                            <th>
                                وضعیت تفاهم
                            </th>
");
            EndContext();
            BeginContext(9665, 465, true);
            WriteLiteral(@"                            <th>
                                نمرات
                            </th>
                            <th>
                                حذف
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

");
            EndContext();
            DefineSection("Plugins", async() => {
                BeginContext(10147, 259, true);
                WriteLiteral(@"
    <script src=""/assets/plugins/jquery-validation/dist/jquery.validate.min.js"" type=""text/javascript""></script>
    <script src=""/assets/plugins/bootstrap-toastr/toastr.min.js""></script>
    <script src=""/assets/scripts/custom/ui-toastr.js""></script>

");
                EndContext();
                BeginContext(10511, 414, true);
                WriteLiteral(@"
    <script type=""text/javascript"" src=""/assets/plugins/select2v4/select2/dist/js/select2.min.js""></script>
    <script src=""/assets/plugins/jQuery-tagEditor-master/jquery.caret.min.js""></script>
    <script src=""/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.min.js""></script>


    <script src=""/assets/plugins/jquery-validation/dist/jquery.validate.min.js"" type=""text/javascript""></script>

");
                EndContext();
                BeginContext(11162, 770, true);
                WriteLiteral(@"
    <script src=""/assets/advancedDataTable/DataTables-1.10.19.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/Buttons-for-DataTables-1.5.2.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/buttons.print.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/buttons.ColVis.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/jsZip.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/pdfmake.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/pdfmake.font.js"" type=""text/javascript""></script>
    <script src=""/assets/advancedDataTable/buttons.html5.js"" type=""text/javascript""></script>

");
                EndContext();
            }
            );
            BeginContext(11935, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(11954, 34337, true);
                WriteLiteral(@"

    <script>
        function getTruth(d) {
            var r;
            $.ajax({
                url: ""/BehaviouralCompetencyAssignment/GetCoacherTruth"",
                type: ""POST"",
                data: { behaviouralCompetencyId: d.BehaviouralCompetencyId, evaluationBehaviouralCompetencyId: d.EvaluationBehaviouralCompetencyId },
                async: false,
                dataType: ""html"",
                success: function (result) {
                    r = result;
                }
            });
            return r;
        }
        var dt;

        function show_dataTable() {
            dt = $('#competencyAssignmentTable').DataTable({
                dom: 'CT<""clearfix"">lBfrtip',
                buttons: [
                    'copy', 'csv', 'excel',
                    'pdf',
                    {
                        extend: 'pdfHtml5',
                        download: 'open',
                        exportOptions: {
                            columns: ':vis");
                WriteLiteral(@"ible'
                        }
                    },
                    {
                        extend: 'print',
                        exportOptions: {
                            columns: ':visible'
                        }
                    },
                    'colvis'
                ],
                columnDefs: [
                    {
                        targets: [-1],
                        visible: false
                    }
                ],
                ""fnInitComplete"": function (oSettings, json) {

                },
                ""fnDrawCallback"": function (oSettings) {
                    $("".viewScoreBtn"").click(function () {
                        $('#competencyAssignmentTable >tbody>tr').each(function () {
                            $(this).removeClass('selected');
                        })
                        $.ajax(
                            {
                                url: ""/BehaviouralCompetencyAssignment/ViewScore"",
    ");
                WriteLiteral(@"                            contentType: 'aplication/json;charset=utf-8',
                                type: ""GET"",
                                datatype: 'html',
                                data: { periodDefinitionId: $(this).attr(""periodDefinitionId"") },
                                success: function (data, textStatus, jqXHR) {
                                    $(""#modalPlace"").html(data);
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    alert(""erorr"");
                                    alert(jqXHR);
                                    alert(textStatus);
                                }
                            });
                    });
                    $("".deleteCompetencyAssignmentBtn"").click(function () {
                        $('#competencyAssignmentTable >tbody>tr').each(function () {
                            $(this).removeClass('selected');
          ");
                WriteLiteral(@"              })
                        var tr = $(this).closest('tr');
                        var row = dt.row(tr);
                        DeleteCompetencyView = {};
                        DeleteCompetencyView.PeriodDefinitionId = row.data().PeriodDefinitoionId;
                        DeleteCompetencyView.AllocatorDepartmentId = row.data().AllocatorEvaluationBehaviouralHierarchyId;
                        DeleteCompetencyView.AllocatorPersonId = row.data().AllocatorPersonId;
                        DeleteCompetencyView.CompetencyTitle = row.data().Title;
                        DeleteCompetencyView.BehaviouralCompetencyId = row.data().BehaviouralCompetencyId;
                        DeleteCompetencyView.HasParticipant = row.data().hasParticipant;
                        DeleteCompetencyView.EvaluationBehaviouralCompetencyId = row.data().EvaluationBehaviouralCompetencyId;

                        console.log(DeleteCompetencyView);
                        $.ajax(
                            ");
                WriteLiteral(@"{
                                //data:postdata,
                                url: '/BehaviouralCompetencyAssignment/DeleteCompetencyAssignmentPartial',
                                //url : formURL,
                                //data: postdata,
                                data: JSON.stringify(DeleteCompetencyView),
                                //data: ""firstName="" + $(""fn"").val(),
                                //cache: false,
                                //contentType: false,
                                //processData: false,
                                datatype: 'json',
                                contentType: 'application/json; charset=utf-8',
                                type: 'POST',
                                success: function (data, textStatus, jqXHR) {
                                    $(""#modalPlace"").html(data);

                                    if (data.notAllowed) {
                                        var message = """";
          ");
                WriteLiteral(@"                              message += ""<span>شایستگی رفتاری که فقط خود اختصاص دهنده آن هستید قابل حذف می باشد.</span><br><br>"";
                                        toastr.options.timeOut = ""15000"";
                                        toastr.options.positionClass = ""toast-top-center"";
                                        toastr.info(message);
                                    }
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    alert(""erorr"");
                                    alert(jqXHR);
                                    alert(textStatus);
                                }
                            });
                    });
                    $("".refutationCauseBtn"").click(function () {
                        $('#competencyAssignmentTable >tbody>tr').each(function () {
                            $(this).removeClass('selected');
                        })
        ");
                WriteLiteral(@"                var tr = $(this).closest('tr');
                        var row = dt.row(tr);

                        $.ajax(
                            {
                                url: '/BehaviouralCompetencyAssignment/RefutationCauseCompetencyLookAt',
                                data: {
                                    title: row.data().Title
                                    , evaluationBehaviouralCompetencyId: row.data().EvaluationBehaviouralCompetencyId
                                },
                                datatype: 'html',
                                type: 'POST',
                                success: function (data, textStatus, jqXHR) {
                                    $(""#modalPlace"").html(data);
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    alert(""erorr"");
                                    alert(jqXHR);
                                ");
                WriteLiteral(@"    alert(textStatus);
                                }
                            });
                    });
                    // Array to track the ids of the details displayed rows
                    var detailRows = [];
                    $('.details-control').on('click', function () {
                        var tr = $(this).closest('tr');
                        var row = dt.row(tr);
                        var idx = $.inArray(tr.attr('id'), detailRows);

                        if (row.child.isShown()) {
                            tr.removeClass('details');
                            row.child.hide();

                            // Remove from the 'open' array
                            detailRows.splice(idx, 1);
                        }
                        else {
                            tr.addClass('details');
                            row.child(getTruth(row.data())).show();

                            // Add to the 'open' array
                           ");
                WriteLiteral(@" if (idx === -1) {
                                detailRows.push(tr.attr('id'));
                            }
                        }
                    });
                    // On each draw, loop over the `detailRows` array and show any child rows
                    dt.on('draw', function () {
                        $.each(detailRows, function (i, id) {
                            $('#' + id + ' td.details-control').trigger('click');
                        });
                    });
                },
                ""pagingType"": ""full_numbers"",
                ""lengthMenu"": [
                    [50, 25, 10, -1],
                    [50, 25, 10, ""All""]
                ],
                ""columnDefs"": [
                    { ""orderable"": false, ""targets"": [9, 10, 11] }
                ],
                ""processing"": true,
                ""serverSide"": true,
                ""ajax"": {
                    ""url"": ""/BehaviouralCompetencyAssignment/GetAssignedCompetencyList"",
");
                WriteLiteral(@"                    ""type"": ""Post"",
                    ""data"": function (d) {
                        d.employeeId2 = $('#employeeId').children('option:selected').val(),
                            d.periodDefinitionIdDT2 = $('#periodDefinitionIdDT').children('option:selected').val(),
                            d.departmentIdDT = $('#departmentId').children('option:selected').val()
                    },
                    //""contentType"": 'application/json; charset=utf-8',
                    //""cache"": false,
                    ""dataType"": ""json"",
                    //'data': function (data) {
                    //    data = JSON.stringify(data)
                    //    return data;
                    //}
                },
                ""aoColumns"": [
                    {
                        ""mData"": ""PeriodCode"",
                    },
                    {
                        ""mData"": ""PeriodTitle""
                    },
                    {
                     ");
                WriteLiteral(@"   ""mData"": ""allocatorFullName"",
                        ""render"": function (data, type, row, meta) {
                            if (data == null) {
                                data = '----'
                            }
                            return data;
                        }
                    },
                    {
                        ""mData"": ""allocatorDepartmentName"",
                        ""render"": function (data, type, row, meta) {
                            if (data == null) {
                                data = '----'
                            }
                            return data;
                        }
                    },
                    {
                        ""mData"": ""allocatorRoleName"",
                        ""render"": function (data, type, row, meta) {
                            if (data == ""PlanningAdmin"") {
                                data = 'ادمین برنامه ریزی'
                            }
                           ");
                WriteLiteral(@" else if (data == ""Coacher"") {
                                data = 'مربی'
                            }
                            else if (data == ""HRAdmin"") {
                                data = 'ادمین سرمایه انسانی'
                            }
                            return data;
                        }
                    },
                    {
                        ""mData"": ""text""
                    },
                    {
                        ""mData"": ""Title""
                    },
                    {
                        ""mData"": ""BehaviouralCompetencyWeight""
                    },
                    {
                        ""mData"": ""EvaluationAcceptanceStatusId"",
                        ""className"": ""text-center"",
                        ""render"": function (data, type, row, meta) {
                            if (data == ""1"") {
                                data = ""<span class='label label-sm label-success'>تفاهم</span>"";
                      ");
                WriteLiteral(@"      }
                            else if (data == ""2"") {
                                data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-warning'>ابلاغی</span></a>"";
                            }
                            else if (data == ""3"") {
                                data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-info'>صرف نظر</span></a>"";
                            } else if (data == ""4"") {
                                data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-danger'>نامشخص</span></a>"";
                            }
                            return data;
                        }
                    },
                    //{
                    //    ""mData"": ""hasParticipant"",
                    //    ""render"": function (data, type, row, meta) {
                    //        if (data == ""1"") {
");
                WriteLiteral(@"                    //            if (row.participantConfirmation == 0) {
                    //                data = ""<span class='label label-sm label-info'>عدم پذیرش</span>"";
                    //            } else if (row.participantConfirmation == 1) {
                    //                data = ""<span class='label label-sm label-success'>پذیرش</span>"";
                    //            } else if (row.participantConfirmation == null) {
                    //                data = ""<span class='label label-sm label-warning'>نامشخص</span>"";
                    //            }
                    //        } else {
                    //            data = 'فاقد سایرارزیاب';
                    //        }
                    //        return data;
                    //    }
                    //},
                    {
                        ""mData"": null,
                        ""render"": function (data, type, row, meta) {
                            data = ""<a href='#' data-toggle='m");
                WriteLiteral(@"odal' periodDefinitionId="" + row.PeriodDefinitoionId + "" class='btn viewScoreBtn'><i class='fa fa-eye'></i></a>"";
                            return data;
                        }
                    },
                    {
                        ""mData"": null,
                        ""render"": function (data, type, row, meta) {
                            data = ""<a href='#' data-toggle='modal' class='btn deleteCompetencyAssignmentBtn'><i class='fa fa-trash-o'></i></a>"";
                            return data;
                        }
                    },
                    {
                        ""class"": ""details-control"",
                        ""orderable"": false,
                        ""data"": null,
                        ""defaultContent"": """"
                    }
                ]
            });
        }
        show_dataTable();

        $(""#competencyAssignmentTable_filter"").after(""<div id='dataTables_filter_employee' class='dataTables_filter input-DT hidden'><labe");
                WriteLiteral(@"l>انتخاب کارمند :<select name='employeeId' id='employeeId' class='form-control input-medium'></select></label></div>"");

        $(""#competencyAssignmentTable_filter"").after(""<div id='dataTables_filter_subSet' class='dataTables_filter input-DT hidden'><label><select name='subSetDepartmentIdDT' id='subSetDepartmentIdDT' class='form-control input-medium'></select></label></div>"");

        $(""#competencyAssignmentTable_filter"").after(""<div id='departmentIdDT' class='dataTables_filter input-DT'><label>انتخاب رده سازمانی:<select name='departmentId' id='departmentId' class='form-control input-medium'></select></label></div>"");

        $(""#competencyAssignmentTable_filter"").after(""<div class='dataTables_filter input-DT'><label>انتخاب دوره:<select name='periodDefinitionIdDT' id='periodDefinitionIdDT' class='form-control input---medium'></select></label></div>"");

        $(""#competencyAssignmentTable_filter"").after(""<div class='clearfix'></div>"");

        //$.ajax({
        //    type: 'get',
        /");
                WriteLiteral(@"/    url: '/share/GetPeriodDefinitionFromEvaluation',
        //    //data: { roleId: roleId },
        //    success: function (periodDefinition) {
        //        $(""#periodDefinitionIdDT"").empty();
        //        $(""#periodDefinitionIdDT"").append(""<option></option>"");

        //        $(periodDefinition).each(function (i, p) {
        //            //$(""#parentName"").select2(""val"", d.departmentId);
        //            $(""#periodDefinitionIdDT"").append(""<option value='"" + p.periodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
        //        })
        //    },
        //    error: function (status) {
        //        alert(""Error"");
        //    }
        //})
        $.ajax({
            type: 'get',
            url: '/share/GetPeriodDefinitionList',
            //data: { roleId: roleId },
            success: function (periodDefinition) {
                $(""#periodDefinitionIdDT"").empty();
                //$(""#periodDefinitionIdDT"").append(""");
                WriteLiteral(@"<option></option>"");
                var max = 0;
                $(periodDefinition).each(function (i, p) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    if (p.periodDefinitoionId > max) {
                        max = p.periodDefinitoionId;
                    }
                    $(""#periodDefinitionIdDT"").append(""<option value='"" + p.periodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
                })
                $(""#periodDefinitionIdDT"").val(max);
                $('#periodDefinitionIdDT').trigger('change');
            },
            error: function (status) {
                alert(""Error"");
            }
        })

        $('#periodDefinitionIdDT').on('change', function () {
            $(""#dataTables_filter_subSet"").addClass(""hidden"");
            $(""#subSetDepartmentIdDT"").empty();
            $(""#dataTables_filter_employee"").addClass(""hidden"");
            $(""#employeeId"").empty();
            ");
                WriteLiteral(@"$(""#subSetDepartmentIdDT"").append(""<option></option>"");

            $.ajax({
                type: 'get',
                url: '/TaskAssignment/GetDepartmentResponsibiltyList',
                data: { periodDefinitionId: $('#periodDefinitionIdDT').children('option:selected').val() },
                success: function (DepartmentResponsibilty) {

                    $(""#departmentIdDT #departmentId"").empty();
                    $(""#departmentIdDT #departmentId"").append(""<option></option>"");

                    $(DepartmentResponsibilty).each(function (i, p) {
                        //$(""#parentName"").select2(""val"", d.departmentId);
                        $(""#departmentId"").append(""<option value='"" + p.evaluationHierarchyId + ""'>"" + p.shortName + ""</option>"");
                        if (p.positionType == 1) {
                            $(""#departmentId"").val(p.evaluationHierarchyId);
                            $(""#departmentId"").trigger('change');
                        }
            ");
                WriteLiteral(@"        })
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        });

        function formatResult(node) {
            var level = 0;
            var $result
            if (node.element !== undefined) {
                level = (node.element.className);
                if (level.trim() !== '') {
                    level = (parseFloat(level.match(/\d+/)[0]));
                }

                if (node.element.className == 'level_0' || node.element.className == 'level_1') {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;font-weight: bold;"" > ' + node.text + '</span>');
                } else {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;"" > ' + node.text + '</span>');

                }
            }


            return $result;
        }
        function buildHierarchy(arry) {

            var roots = [], children = {};");
                WriteLiteral(@"

            // find the top level nodes and hash the children based on parent
            for (var i = 0, len = arry.length; i < len; ++i) {
                var item = arry[i],
                    p = item.parent,
                    target = !p ? roots : (children[p] || (children[p] = []));
                target.push({ value: item });
            }

            // function to recursively build the tree
            var findChildren = function (parent) {
                if (children[parent.value.EvaluationHierarchyId]) {
                    parent.children = children[parent.value.EvaluationHierarchyId];
                    $(parent.children).each(function (i, p) {
                        //$(""<option class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + parent.value.EvaluationHierarchyId + ""']"");
                        if ($(""#subSetDepartmentIdDT option[parent='"" + p.value.pare");
                WriteLiteral(@"nt + ""']:last"").length > 0) {
                            $(""<option parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[parent='"" + p.value.parent + ""']:last"");
                        } else {
                            $(""<option parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + p.value.parent + ""']"");
                        }

                    })
                    for (var i = 0, len = parent.children.length; i < len; ++i) {

                        findChildren(parent.children[i]);
                    }
                }
            };

            // enumerate through to handle the case where there are multiple roots
            for (var i = 0, len = roots.length; ");
                WriteLiteral(@"i < len; ++i) {
                $(roots).each(function (i, p) {
                    $(""#subSetDepartmentIdDT"").append(""<option parent="" + p.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"");
                })
                findChildren(roots[i]);
            }

            return roots;
        }
        $('#departmentId').on('change', function () {
            //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
            //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
            //    dt.ajax.reload();
            //}
            $.ajax({
                type: 'get',
                url: '/TaskAssignment/GetSubSetDepartments',
                data: { departmentId: $('#departmentId').children('option:selected').val() },
                success: function (DepartmentResponsibilty) {
                ");
                WriteLiteral(@"    $(""#dataTables_filter_subSet"").addClass(""hidden"");
                    $(""#subSetDepartmentIdDT"").empty();
                    $(""#dataTables_filter_employee"").addClass(""hidden"");
                    $(""#employeeId"").empty();
                    $(""#subSetDepartmentIdDT"").append(""<option></option>"");
                    if (DepartmentResponsibilty.length > 1) {
                        $(""#dataTables_filter_subSet"").removeClass(""hidden"");
                        var items = DepartmentResponsibilty;
                        buildHierarchy(items);
                        //$(""#subSetDepartmentIdDT option[class='level_0']"").attr(""disabled"", ""disabled"");
                        $('#subSetDepartmentIdDT').select2({
                            placeholder: ""انتخاب واحد زیر مجموعه"",
                            allowClear: true,
                            width: ""300px"",
                            templateResult: formatResult
                        });
                    } else if (DepartmentRes");
                WriteLiteral(@"ponsibilty.length == 1) {
                        $(""#dataTables_filter_subSet"").addClass(""hidden"");
                        $.ajax({
                            type: 'get',
                            url: '/TaskAssignment/GetDirectEmployees',
                            data: {
                                departmentId: $('#departmentId').children('option:selected').val()
                                , isSupervisor: true
                            },
                            success: function (subSetEmployees) {
                                $(""#employeeId"").empty();
                                $(""#employeeId"").append(""<option></option>"");
                                $(subSetEmployees).each(function (i, p) {
                                    $(""#employeeId"").append(""<option value='"" + p.PeopleId + ""-"" + p.EvaluationHierarchyID + ""'>"" + p.FullName + ""</option>"");
                                })
                                $(""#dataTables_filter_employee"").removeCla");
                WriteLiteral(@"ss(""hidden"");
                            },
                            error: function (status) {
                                alert(""Error"");
                            }
                        })
                    }

                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        });

        $('#subSetDepartmentIdDT').on('change', function () {
            //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
            //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
            //    dt.ajax.reload();
            //}
            $.ajax({
                type: 'get',
                url: '/TaskAssignment/GetDirectEmployees',
                data: { departmentId: $('#subSetDepartmentIdDT').children('option:selected').val() },
                success: function (subSetEmployees) {
                    $(""#employ");
                WriteLiteral(@"eeId"").empty();
                    $(""#employeeId"").append(""<option></option>"");
                    $(subSetEmployees).each(function (i, p) {
                        $(""#employeeId"").append(""<option isSupervisor="" + p.IsSupervisor + "" value='"" + p.PeopleId + ""-"" + p.EvaluationHierarchyID + ""'>"" + p.FullName + ""</option>"");
                    })
                    $(""#employeeId option[issupervisor='true']"").css(""font-weight"", ""bold"");
                    $(""#dataTables_filter_employee"").removeClass(""hidden"");
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        });

        $('#employeeId').on('change', function () {
            //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
            dt.ajax.url(""/BehaviouralCompetencyAssignment/GetAssignedCompetencyList"");
            dt.ajax.reload();
            //}
       ");
                WriteLiteral(@" })
        $(""#reload"").click(function () {
            $(""#employeeId"").val("""");
            $(""#departmentId"").val("""");
            dt.ajax.url(""/BehaviouralCompetencyAssignment/GetAssignedCompetencyList"");
            dt.ajax.reload();
            $(""#periodDefinitionIdDT"").val(null);
            $(""#subSetDepartmentIdDT"").val("""").select2();
            $(""#dataTables_filter_employee"").addClass(""hidden"");
            $(""#dataTables_filter_subSet"").addClass(""hidden"");
            $(""#departmentId"").empty();
        })
        $(""#competencyTransitionBtn"").click(function () {
            $.ajax(
                {
                    url: ""/BehaviouralCompetencyAssignment/TransferCompetencyAssignment"",
                    contentType: 'aplication/json;charset=utf-8',
                    type: ""GET"",
                    datatype: 'html',

                    success: function (data, textStatus, jqXHR) {
                        $(""#modalPlace"").html(data);
                    },
        ");
                WriteLiteral(@"            error: function (jqXHR, textStatus, errorThrown) {
                        alert(""erorr"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                }).always(function () {

                });
        });
        $(""#BehaviouralCompetencyAssignmentBtn"").click(function () {
            $.ajax(
                {
                    url: ""/BehaviouralCompetencyAssignment/BehaviouralCompetencyAssignment"",
                    contentType: 'aplication/json;charset=utf-8',
                    type: ""GET"",
                    datatype: 'html',

                    success: function (data, textStatus, jqXHR) {
                        $(""#modalPlace"").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(""erorr"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
     ");
                WriteLiteral(@"   });
        $(""#BehaviouralWeightAssignmentBtn"").click(function () {
            if (!dt.data().count()) {
                alert('وظیفه ای برای انتخاب وجود ندارد');
            }
            else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val() != """" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != """" && $('#employeeId').children('option:selected').val() != null) {
                $('#competencyAssignmentTable >tbody>tr').each(function () {
                    //////////////////////$(this).removeClass('selected');
                })
                $.ajax(
                    {
                        url: ""/BehaviouralCompetencyAssignment/BehaviouralWeightAssignment"",
                        contentType: 'aplication/json;charset=utf-8',
                        type: ""GET"",
");
                WriteLiteral(@"                        datatype: 'html',

                        success: function (data, textStatus, jqXHR) {
                            $(""#modalPlace"").html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(""erorr"");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    });
            }
            else {
                alert(""دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد"");
            }
        });
        $("".competencyScoreAssignmentBtn"").click(function () {
            if (!dt.data().count()) {
                alert('وظیفه ای برای انتخاب وجود ندارد');
            }
            else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val(");
                WriteLiteral(@") != """" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != """" && $('#employeeId').children('option:selected').val() != null) {
                $.ajax(
                    {
                        url: ""/BehaviouralCompetencyAssignment/BehaviouralScoreAssignment"",
                        contentType: 'aplication/json;charset=utf-8',
                        type: ""GET"",
                        datatype: 'html',
                        data: { CoacherType: $(this).attr(""coacherType""), Level: dt.data()[0].Levell },
                        success: function (data, textStatus, jqXHR) {
                            $(""#modalPlace"").html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(""erorr"");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    });
       ");
                WriteLiteral(@"     }
            else {
                alert(""دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد"");
            }
        });

        $(""#competencyAssignmentTable tbody"").on('click', 'tr', function () {
            $(this).toggleClass('selected');
        });
        $(""#renewCompetencyContract"").click(function () {
            if (!dt.data().count()) {
                alert('وظیفه ای برای انتخاب وجود ندارد');
            }
            else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#departmentId').children('option:selected').val() != """") {
                $.ajax(
                    {
                        url: ""/BehaviouralCompetencyAssignment/RenewCompetencyContract"",
                        contentType: 'aplication/json;charset=utf-8',
                        type: ""GET"",
                        datatype: 'html',
                        //data: { CoacherType: $(this).attr(""coacherType"") },
                        succe");
                WriteLiteral(@"ss: function (data, textStatus, jqXHR) {
                            $(""#modalPlace"").html(data);
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(""erorr"");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    });
            }
            else {
                alert(""دوره و سمت سازمانی می بایست در حالت انتخاب باشد"");
            }
        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
