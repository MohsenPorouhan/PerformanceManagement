#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\SubSetScorePartial.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ff50c7510d383932d007e1614a1fa56891168bf5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_TaskAssignment_SubSetScorePartial), @"mvc.1.0.view", @"/Views/Coacher/TaskAssignment/SubSetScorePartial.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/TaskAssignment/SubSetScorePartial.cshtml", typeof(AspNetCore.Views_Coacher_TaskAssignment_SubSetScorePartial))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ff50c7510d383932d007e1614a1fa56891168bf5", @"/Views/Coacher/TaskAssignment/SubSetScorePartial.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_TaskAssignment_SubSetScorePartial : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\SubSetScorePartial.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 820, true);
            WriteLiteral(@"<div class=""clearfix"">
</div>
<table class=""table table-striped table-bordered table-hover table-responsive"" id=""subSetScoreTable"">
    <thead>
        <tr>
            <th>
                کد دوره
            </th>
            <th>
                نام دوره
            </th>
            <th>
                نام اختصاص دهنده
            </th>
            <th>
                واحد اختصاص دهنده
            </th>
            <th>
                نقش تخصیص دهنده
            </th>
            <th>
                نام گیرنده
            </th>
            <th>
                عنوان وظیفه
            </th>
            <th>
                وزن وظیفه
            </th>
            <th>
                منبع
            </th>
            <th>
                وضعیت تفاهم
            </th>
");
            EndContext();
            BeginContext(929, 21062, true);
            WriteLiteral(@"            <th>
                نمرات
            </th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    //var dt2;
    function show_dataTable() {
        dt2 = $('#subSetScoreTable').DataTable({
            dom: 'CT<""clearfix"">lBfrtip',
            buttons: [
                'copy', 'csv', 'excel',
                'pdf',
                {
                    extend: 'pdfHtml5',
                    download: 'open',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'print',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                'colvis'
            ],
            columnDefs: [
                {
                    targets: [-1],
                    visible: false
                }
            ],
            ""fnInitComplete"": function (oSettings, json) {");
            WriteLiteral(@"

            },
            ""fnDrawCallback"": function (oSettings) {

                $("".viewScoreBtn2"").click(function () {
                    $('#subSetScoreTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    $.ajax(
                        {
                            url: ""/TaskAssignment/SubSetViewScore"",
                            contentType: 'aplication/json;charset=utf-8',
                            type: ""GET"",
                            datatype: 'html',
                            data: { periodDefinitionId: $(this).attr(""periodDefinitionId"") },
                            success: function (data, textStatus, jqXHR) {
                                $(""#modalPlace"").html(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(""erorr"");
                                alert(jqXHR);
       ");
            WriteLiteral(@"                         alert(textStatus);
                            }
                        });
                });
                //// Array to track the ids of the details displayed rows
                //var detailRows = [];
                //$('.details-control').on('click', function () {
                //    var tr = $(this).closest('tr');
                //    var row = dt2.row(tr);
                //    var idx = $.inArray(tr.attr('id'), detailRows);

                //    if (row.child.isShown()) {
                //        tr.removeClass('details');
                //        row.child.hide();

                //        // Remove from the 'open' array
                //        detailRows.splice(idx, 1);
                //    }
                //    else {
                //        tr.addClass('details');
                //        row.child(format(row.data())).show();

                //        // Add to the 'open' array
                //        if (idx === -1) {
      ");
            WriteLiteral(@"          //            detailRows.push(tr.attr('id'));
                //        }
                //    }
                //});
                //// On each draw, loop over the `detailRows` array and show any child rows
                //dt2.on('draw', function () {
                //    $.each(detailRows, function (i, id) {
                //        $('#' + id + ' td.details-control').trigger('click');
                //    });
                //});
            },
            ""pagingType"": ""full_numbers"",
            ""lengthMenu"": [
                [10, 25, 50, -1],
                [10, 25, 50, ""All""]
            ],
            ""columnDefs"": [
                { ""orderable"": false, ""targets"": [0] }
            ],
            ""processing"": true,
            ""serverSide"": true,
            ""ajax"": {
                ""url"": ""/TaskAssignment/GetSubSetScoreList"",
                ""type"": ""Post"",
                ""data"": function (d) {
                    d.employeeId2 = $('#employeeId2').ch");
            WriteLiteral(@"ildren('option:selected').val(),
                        d.periodDefinitionIdDT2 = $('#periodDefinitionIdDT2').children('option:selected').val(),
                        d.departmentIdDT = $('#departmentId2').children('option:selected').val()
                },
                //""contentType"": 'application/json; charset=utf-8',
                //""cache"": false,
                ""dataType"": ""json"",
                //'data': function (data) {
                //    data = JSON.stringify(data)
                //    return data;
                //}
            },
            ""aoColumns"": [
                {
                    ""mData"": ""PeriodCode"",
                },
                {
                    ""mData"": ""PeriodTitle""
                },
                {
                    ""mData"": ""allocatorFullName"",
                    ""render"": function (data, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
   ");
            WriteLiteral(@"                     return data;
                    }
                },
                {
                    ""mData"": ""allocatorDepartmentName"",
                    ""render"": function (data, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""allocatorRoleName"",
                    ""render"": function (data, type, row, meta) {
                        if (data == ""PlanningAdmin"") {
                            data = 'ادمین برنامه ریزی'
                        }
                        else if (data == ""Coacher"") {
                            data = 'مربی'
                        }
                        else if (data == ""HRAdmin"") {
                            data = 'ادمین سرمایه انسانی'
                        }
                        return data;
                    }
       ");
            WriteLiteral(@"         },
                {
                    ""mData"": ""text""
                },
                {
                    ""mData"": ""Title""
                },
                {
                    ""mData"": ""TaskWeight""
                },
                {
                    ""mData"": ""ResourceType"",
                    ""render"": function (data, type, row, meta) {
                        if (data == ""1"") {
                            data = ""اهداف کلان"";
                        }
                        else if (data == ""2"") {
                            data = ""وظایف عمومی"";
                        }
                        else if (data == ""3"") {
                            data = ""وظایف شکسته شده"";
                        } else if (data == ""4"") {
                            data = ""وظایف متنی"";
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""EvaluationAcceptanceStatusId"",
   ");
            WriteLiteral(@"                 ""render"": function (data, type, row, meta) {
                        if (data == ""1"") {
                            data = ""<span class='label label-sm label-success'>تفاهم</span>"";
                        }
                        else if (data == ""2"") {
                            data = ""<span class='label label-sm label-warning'>ابلاغی</span>"";
                        }
                        else if (data == ""3"") {
                            data = ""<span class='label label-sm label-info'>صرف نظر</span>"";
                        } else if (data == ""4"") {
                            data = ""<span class='label label-sm label-danger'>نامشخص</span>"";
                        }
                        return data;
                    }
                },
                //{
                //    ""mData"": ""hasParticipant"",
                //    ""render"": function (data, type, row, meta) {
                //        if (data == ""1"") {
                //            if (row.par");
            WriteLiteral(@"ticipantConfirmation == 0) {
                //                data = ""<span class='label label-sm label-info'>عدم پذیرش</span>"";
                //            } else if (row.participantConfirmation == 1) {
                //                data = ""<span class='label label-sm label-success'>پذیرش</span>"";
                //            } else if (row.participantConfirmation == null) {
                //                data = ""<span class='label label-sm label-warning'>نامشخص</span>"";
                //            }
                //        } else {
                //            data = 'فاقد سایرارزیاب';
                //        }
                //        return data;
                //    }
                //},
                {
                    ""mData"": null,
                    ""render"": function (data, type, row, meta) {
                        data = ""<a href='#' data-toggle='modal' periodDefinitionId="" + row.PeriodDefinitoionId + "" class='btn viewScoreBtn2'><i class='fa fa-eye'></i><");
            WriteLiteral(@"/a>"";
                        return data;
                    }
                }
                //{
                //    ""class"": ""details-control"",
                //    ""orderable"": false,
                //    ""data"": null,
                //    ""defaultContent"": """"
                //}
            ]
        });
    }
    show_dataTable();

    $(""#subSetScoreTable_filter"").after(""<div id='dataTables_filter_employee2' class='dataTables_filter input-DT hidden'><label>انتخاب کارمند :<select name='employeeId' id='employeeId2' class='form-control input-medium'></select></label></div>"");

    $(""#subSetScoreTable_filter"").after(""<div id='dataTables_filter_subSet2' class='dataTables_filter input-DT hidden'><label><select name='subSetDepartmentIdDT' id='subSetDepartmentIdDT2' class='form-control input-medium'></select></label></div>"");

    $(""#subSetScoreTable_filter"").after(""<div id='departmentIdDT2' class='dataTables_filter input-DT'><label>انتخاب رده سازمانی:<select name='departmentId' i");
            WriteLiteral(@"d='departmentId2' class='form-control input-medium'></select></label></div>"");

    $(""#subSetScoreTable_filter"").after(""<div class='dataTables_filter input-DT'><label>انتخاب دوره:<select name='periodDefinitionIdDT' id='periodDefinitionIdDT2' class='form-control input---medium'></select></label></div>"");

    $(""#subSetScoreTable_filter"").after(""<div class='clearfix'></div>"");

    $.ajax({
        type: 'get',
        url: '/share/GetPeriodDefinitionList',
        //data: { roleId: roleId },
        success: function (periodDefinition) {
            $(""#periodDefinitionIdDT2"").empty();
            //$(""#periodDefinitionIdDT"").append(""<option></option>"");
            var max = 0;
            $(periodDefinition).each(function (i, p) {
                //$(""#parentName"").select2(""val"", d.departmentId);
                if (p.periodDefinitoionId > max) {
                    max = p.periodDefinitoionId;
                }
                $(""#periodDefinitionIdDT2"").append(""<option value='"" + p.per");
            WriteLiteral(@"iodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
            })
            $(""#periodDefinitionIdDT2"").val(max);
            $('#periodDefinitionIdDT2').trigger('change');
        },
        error: function (status) {
            alert(""Error"");
        }
    })

    $('#periodDefinitionIdDT2').on('change', function () {
        $(""#dataTables_filter_subSet2"").addClass(""hidden"");
        $(""#subSetDepartmentIdDT2"").empty();
        $(""#dataTables_filter_employee2"").addClass(""hidden"");
        $(""#employeeId2"").empty();
        $(""#subSetDepartmentIdDT2"").append(""<option></option>"");

        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDepartmentResponsibiltyList',
            data: { periodDefinitionId: $('#periodDefinitionIdDT2').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {

                $(""#departmentIdDT2 #departmentId2"").empty();
                $(""#departmentIdDT2 #depart");
            WriteLiteral(@"mentId2"").append(""<option></option>"");

                $(DepartmentResponsibilty).each(function (i, p) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#departmentId2"").append(""<option value='"" + p.evaluationHierarchyId + ""'>"" + p.shortName + ""</option>"");
                    if (p.positionType == 1) {
                        $(""#departmentId2"").val(p.evaluationHierarchyId);
                        $(""#departmentId2"").trigger('change');
                    }
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    function formatResult(node) {
        var level = 0;
        var $result
        if (node.element !== undefined) {
            level = (node.element.className);
            if (level.trim() !== '') {
                level = (parseFloat(level.match(/\d+/)[0]));
            }

            if (node.element.className == 'level_0' || node.element.");
            WriteLiteral(@"className == 'level_1') {
                $result = $('<span style=""padding-right:' + (20 * level) + 'px;font-weight: bold;"" > ' + node.text + '</span>');
            } else {
                $result = $('<span style=""padding-right:' + (20 * level) + 'px;"" > ' + node.text + '</span>');

            }
        }


        return $result;
    }
    function buildHierarchy(arry) {

        var roots = [], children = {};

        // find the top level nodes and hash the children based on parent
        for (var i = 0, len = arry.length; i < len; ++i) {
            var item = arry[i],
                p = item.parent,
                target = !p ? roots : (children[p] || (children[p] = []));
            target.push({ value: item });
        }

        // function to recursively build the tree
        var findChildren = function (parent) {
            if (children[parent.value.EvaluationHierarchyId]) {
                parent.children = children[parent.value.EvaluationHierarchyId];
         ");
            WriteLiteral(@"       $(parent.children).each(function (i, p) {
                    //$(""<option class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + parent.value.EvaluationHierarchyId + ""']"");
                    if ($(""#subSetDepartmentIdDT2 option[parent='"" + p.value.parent + ""']:last"").length > 0) {
                        $(""<option parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT2 option[parent='"" + p.value.parent + ""']:last"");
                    } else {
                        $(""<option parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT2 option[value='"" + p.value.parent + ""']"");
                    }");
            WriteLiteral(@"

                })
                for (var i = 0, len = parent.children.length; i < len; ++i) {

                    findChildren(parent.children[i]);
                }
            }
        };

        // enumerate through to handle the case where there are multiple roots
        for (var i = 0, len = roots.length; i < len; ++i) {
            $(roots).each(function (i, p) {
                $(""#subSetDepartmentIdDT2"").append(""<option parent="" + p.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"");
            })
            findChildren(roots[i]);
        }

        return roots;
    }
    $('#departmentId2').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        //    dt2.ajax.url(""/AssignTask/GetTaskAssignmentList"");
        //    dt2.ajax.reload();
        //}
 ");
            WriteLiteral(@"       $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetSubSetDepartments',
            data: { departmentId: $('#departmentId2').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {
                $(""#dataTables_filter_subSet2"").addClass(""hidden"");
                $(""#subSetDepartmentIdDT2"").empty();
                $(""#dataTables_filter_employee2"").addClass(""hidden"");
                $(""#employeeId2"").empty();
                $(""#subSetDepartmentIdDT2"").append(""<option></option>"");
                if (DepartmentResponsibilty.length > 1) {
                    $(""#dataTables_filter_subSet2"").removeClass(""hidden"");
                    var items = DepartmentResponsibilty;
                    buildHierarchy(items);
                    $(""#subSetDepartmentIdDT2 option[class='level_0']"").attr(""disabled"", ""disabled"");
                    $('#subSetDepartmentIdDT2').select2({
                        placeholder: ""انتخاب واحد زیر مجموعه""");
            WriteLiteral(@",
                        allowClear: true,
                        width: ""300px"",
                        templateResult: formatResult
                    });
                } else if (DepartmentResponsibilty.length == 1) {
                    $(""#dataTables_filter_subSet2"").addClass(""hidden"");
                    $.ajax({
                        type: 'get',
                        url: '/TaskAssignment/GetDirectEmployees',
                        data: {
                            departmentId: $('#departmentId2').children('option:selected').val()
                            , isSupervisor: true
                        },
                        success: function (subSetEmployees) {
                            $(""#employeeId2"").empty();
                            $(""#employeeId2"").append(""<option></option>"");
                            $(subSetEmployees).each(function (i, p) {
                                $(""#employeeId2"").append(""<option value='"" + p.PeopleId + ""-"" + p.Evaluation");
            WriteLiteral(@"HierarchyID + ""'>"" + p.FullName + ""</option>"");
                            })
                            $(""#dataTables_filter_employee2"").removeClass(""hidden"");
                        },
                        error: function (status) {
                            alert(""Error"");
                        }
                    })
                }

            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    $('#subSetDepartmentIdDT2').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
        //    dt.ajax.reload();
        //}
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDirectEmployees',
            data: { departmentId: $('#subSetDepartmentIdDT2').children('option:selected').val() },
            suc");
            WriteLiteral(@"cess: function (subSetEmployees) {
                $(""#employeeId2"").empty();
                $(""#employeeId2"").append(""<option></option>"");
                $(subSetEmployees).each(function (i, p) {
                    $(""#employeeId2"").append(""<option isSupervisor="" + p.IsSupervisor + "" value='"" + p.PeopleId + ""-"" + p.EvaluationHierarchyID + ""'>"" + p.FullName + ""</option>"");
                })
                $(""#employeeId2 option[issupervisor='true']"").css(""font-weight"", ""bold"");
                $(""#dataTables_filter_employee2"").removeClass(""hidden"");
            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    $('#employeeId2').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        dt2.ajax.url(""/TaskAssignment/GetSubSetScoreList"");
        dt2.ajax.reload();
        //}
    })
    $(""#reload"").clic");
            WriteLiteral(@"k(function () {
        $(""#employeeId2"").val("""");
        $(""#departmentId2"").val("""");
        dt2.ajax.url(""/TaskAssignment/GetSubSetScoreList"");
        dt2.ajax.reload();
        $(""#periodDefinitionIdDT2"").val(null);
        $(""#subSetDepartmentIdDT2"").val("""").select2();
        $(""#dataTables_filter_employee2"").addClass(""hidden"");
        $(""#dataTables_filter_subSet2"").addClass(""hidden"");
        $(""#departmentId2"").empty();
    })

    $(""#subSetScoreTable tbody"").on('click', 'tr', function () {
        $(this).toggleClass('selected');
    });
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
