#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\TaskAssignment.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e5aa65af79f7d9ce566af21c473aa04a0ce2d5ea"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_TaskAssignment_TaskAssignment), @"mvc.1.0.view", @"/Views/Coacher/TaskAssignment/TaskAssignment.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/TaskAssignment/TaskAssignment.cshtml", typeof(AspNetCore.Views_Coacher_TaskAssignment_TaskAssignment))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e5aa65af79f7d9ce566af21c473aa04a0ce2d5ea", @"/Views/Coacher/TaskAssignment/TaskAssignment.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_TaskAssignment_TaskAssignment : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\TaskAssignment.cshtml"
  
    ViewData["Title"] = "تعیین وظایف افراد زیر مجموعه";

#line default
#line hidden
            DefineSection("Styles", async() => {
                BeginContext(80, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(201, 202, true);
                WriteLiteral("<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/plugins/bootstrap-toastr/toastr-rtl.min.css\" />\r\n<link rel=\"stylesheet\" href=\"/assets/plugins/bootstrap-switch/css/bootstrap-switch-rtl.min.css\" />\r\n");
                EndContext();
                BeginContext(501, 105, true);
                WriteLiteral("<link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/plugins/select2v4/select2/dist/css/select2.css\" />\r\n");
                EndContext();
                BeginContext(964, 1988, true);
                WriteLiteral(@"<link rel=""stylesheet"" href=""/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.css"" />

<link rel=""stylesheet"" href=""/assets/advancedDataTable/jquery.dataTables.css"" />
<link rel=""stylesheet"" href=""/assets/advancedDataTable/buttons.dataTables.css"" />
<style>
    .tag-editor li {
        float: right;
    }

    .input-icon.right i {
        right: auto !important;
    }

    .tag-editor {
        line-height: 27px;
        /*max-width: 300px;*/
        overflow: auto;
    }

    .btn-sm, .btn-xs {
        margin: 2px;
    }

    td.details-control {
        background: url('/assets/img/details_open.png') no-repeat center center;
        cursor: pointer;
    }

    tr.details td.details-control {
        background: url('/assets/img/details_close.png') no-repeat center center;
    }

    .dataTable .details td, .dataTable .details th {
        padding: 8px;
        background: none;
        border: 0;
    }

    .input-DT {
        margin-left: 5px;
    }

    ");
                WriteLiteral(@".select2-container .select2-choice > .select2-chosen {
        /*display: block;*/
        overflow: initial;
    }

    #criteria-list {
        z-index: 99999 !important;
    }

    .btn-add, .h3-section {
        margin-right: 10px !important;
    }

    .input-icon.right i {
        z-index: +100;
    }

    .select2-container--open .select2-dropdown {
        z-index: 99999999
    }

    #dataTables_filter_subSet {
        margin-top: 32px;
    }
    /*generated dynamically in textTaskIndirect and because of bug had set width*/
    #participantt2Select21 {
        width: 176px;
    }

    table.dataTable tbody tr.selected td {
        background-color: #B0BED9;
    }
    /*begin of autocomplete*/
    .ui-autocomplete-loading {
        background: white url('/assets/img/input-spinner.gif') right center no-repeat;
    }

    .ui-front {
        z-index: 99999999;
    }
    /*end of autocomplete*/
</style>
");
                EndContext();
            }
            );
            BeginContext(2955, 2621, true);
            WriteLiteral(@"<!-- BEGIN PAGE HEADER-->
<div class=""row"">
    <div class=""col-md-12"">
        <!-- BEGIN PAGE TITLE & BREADCRUMB-->
        <h3 class=""page-title"">
            <small></small>

        </h3>
        <div class=""clearfix""></div>
        <ul class=""page-breadcrumb breadcrumb"">
            <li>
                <i class=""fa fa-home""></i>
                <a href=""/home"">
                    خانه
                </a>
                <i class=""fa fa-angle-left""></i>
            </li>
            <li>
                <a href=""#"">
                    مسیر مورد نظر
                </a>
            </li>
            <li class=""pull-right"">
                <div id=""dashboard-report-range"" class=""dashboard-date-range tooltips"" data-placement=""top"" data-original-title=""Change dashboard date range"">
                    <i class=""fa fa-calendar""></i>
                    <span>
                    </span>
                    <i class=""fa fa-angle-down""></i>
                </div>
            </l");
            WriteLiteral(@"i>
        </ul>
        <!-- END PAGE TITLE & BREADCRUMB-->
    </div>
</div>
<!-- END PAGE HEADER-->

<div class=""row"">
    <div class=""col-md-12"">
        <div class=""portlet blue box"">
            <div class=""portlet-title"">
                <div class=""caption"">
                    <i class=""fa fa-cogs""></i>اختصاص اهداف و فعالیت ها به نفرات
                </div>
                <div class=""tools"">
                    <a href=""javascript:;"" class=""collapse"">
                    </a>
                    <a href=""#portlet-config"" data-toggle=""modal"" class=""config"">
                    </a>
                    <a href=""javascript:;"" id=""reload"" class=""reload"">
                    </a>
                    <a href=""javascript:;"" class=""remove"">
                    </a>
                </div>
            </div>
            <div class=""portlet-body"">
                <div class=""tabbable-custom "">
                    <ul class=""nav nav-tabs "">
                        <li class=""active""");
            WriteLiteral(@">
                            <a href=""#tab_5_1"" data-toggle=""tab"">
                                مدیریت وظایف
                            </a>
                        </li>
                        <li>
                            <a id=""subsetTaskScore"" href=""#tab_5_2"" data-toggle=""tab"">
                                مشاهده وظایف و نمرات کل زیرمجموعه
                            </a>
                        </li>
                    </ul>
                    <div class=""tab-content"">
                        <div class=""tab-pane active"" id=""tab_5_1"">
");
            EndContext();
            BeginContext(5882, 1654, true);
            WriteLiteral(@"                            <div class=""btn-group"">
                                <button type=""button"" class=""btn blue btn-sm dropdown-toggle"" data-toggle=""dropdown"" data-hover=""dropdown"" data-delay=""1000"" data-close-others=""true"">
                                    تعیین وظیفه
                                    <i class=""fa fa-angle-down""></i>
                                </button>
                                <ul class=""dropdown-menu"" role=""menu"">
                                    <li>
                                        <a id=""taskAssignmentBtn"" data-toggle=""modal"">
                                            مستقیم
                                        </a>
                                    </li>
                                    <li class=""disabled"">
                                        <a id=""taskAssignmentToIndirectBtn_____Disable"" data-toggle=""modal"">
                                            غیر مستقیم
                                        </a>
           ");
            WriteLiteral(@"                         </li>
                                    <li>
                                        <a id=""taskAssignmentTransferBtn"" data-toggle=""modal"">
                                            انتقال تفاهمات از دوره قبل
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class=""btn-group"">
                                <a id=""weightAssignmentBtn"" class=""btn blue btn-sm pull-left"" data-toggle=""modal"">وزن دهی وظایف</a>
                            </div>

");
            EndContext();
            BeginContext(7690, 3161, true);
            WriteLiteral(@"                            <div class=""btn-group"">
                                <a id=""renewContract"" class=""btn blue btn-sm pull-left"" data-toggle=""modal"">تغییر وضعیت تفاهم</a>
                            </div>

                            <div class=""btn-group"">
                                <button type=""button"" class=""btn blue btn-sm dropdown-toggle"" data-toggle=""dropdown"" data-hover=""dropdown"" data-delay=""1000"" data-close-others=""true"">
                                    نمره دهی به اهداف کارمند انتخاب شده
                                    <i class=""fa fa-angle-down""></i>
                                </button>
                                <ul class=""dropdown-menu"" role=""menu"">
                                    <li>
                                        <a class=""scoreAssignmentBtn"" coacherType=""1"">
                                            به عنوان مربی اصلی
                                        </a>
                                    </li>
                        ");
            WriteLiteral(@"            <li>
                                        <a class=""scoreAssignmentBtn"" coacherType=""2"">
                                            به عنوان مربی فرعی
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class=""clearfix"">
                            </div>
                            <table class=""table table-striped table-bordered table-hover table-responsive"" id=""taskAssignmentTable"">
                                <thead>
                                    <tr>
                                        <th>
                                            کد دوره
                                        </th>
                                        <th>
                                            نام دوره
                                        </th>
                                        <th>
                                            نا");
            WriteLiteral(@"م اختصاص دهنده
                                        </th>
                                        <th>
                                            واحد اختصاص دهنده
                                        </th>
                                        <th>
                                            نقش تخصیص دهنده
                                        </th>
                                        <th>
                                            نام گیرنده
                                        </th>
                                        <th>
                                            عنوان وظیفه
                                        </th>
                                        <th>
                                            وزن وظیفه
                                        </th>
                                        <th>
                                            منبع
                                        </th>
                                        <th>
               ");
            WriteLiteral("                             وضعیت تفاهم\r\n                                        </th>\r\n");
            EndContext();
            BeginContext(11059, 990, true);
            WriteLiteral(@"                                        <th>
                                            نمرات
                                        </th>
                                        <th>
                                            ویرایش
                                        </th>
                                        <th>
                                            حذف
                                        </th>
                                        <th>
                                            مصادیق/شاخص
                                        </th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                        <div class=""tab-pane"" id=""tab_5_2"">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

");
            EndContext();
            DefineSection("Plugins", async() => {
                BeginContext(12066, 357, true);
                WriteLiteral(@"
<script src=""/assets/plugins/jquery-validation/dist/jquery.validate.min.js"" type=""text/javascript""></script>
<script src=""/assets/plugins/bootstrap-toastr/toastr.min.js""></script>
<script src=""/assets/scripts/custom/ui-toastr.js""></script>
<script src=""/assets/plugins/bootstrap-switch/js/bootstrap-switch-rtl.min.js"" type=""text/javascript""></script>
");
                EndContext();
                BeginContext(12520, 394, true);
                WriteLiteral(@"
<script type=""text/javascript"" src=""/assets/plugins/select2v4/select2/dist/js/select2.min.js""></script>
<script src=""/assets/plugins/jQuery-tagEditor-master/jquery.caret.min.js""></script>
<script src=""/assets/plugins/jQuery-tagEditor-master/jquery.tag-editor.min.js""></script>
<script src=""/assets/plugins/jquery-validation/dist/jquery.validate.min.js"" type=""text/javascript""></script>

");
                EndContext();
                BeginContext(13135, 738, true);
                WriteLiteral(@"
<script src=""/assets/advancedDataTable/DataTables-1.10.19.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/Buttons-for-DataTables-1.5.2.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/buttons.print.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/buttons.ColVis.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/jsZip.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/pdfmake.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/pdfmake.font.js"" type=""text/javascript""></script>
<script src=""/assets/advancedDataTable/buttons.html5.js"" type=""text/javascript""></script>

");
                EndContext();
            }
            );
            BeginContext(13876, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(13895, 37768, true);
                WriteLiteral(@"

<script>
    $('.select2').select2({
        placeholder: ""انتخاب کنید"",
        allowClear: true
    });

    var dt;
    var dt2;
    function getCriteria(d) {
        var r;
        $.ajax({
            url: ""/TaskAssignment/GetCriteria"",
            type: ""POST"",
            data: {
                taskId: d.TaskId,
                evaluationId: d.EvaluationId
            },
            async: false,
            dataType: ""html"",
            success: function (result) {
                r = result;
            }
        });
        return r;
    }
    function show_dataTable() {
        dt = $('#taskAssignmentTable').DataTable({
            dom: 'CT<""clearfix"">lBfrtip',
            buttons: [
                'copy', 'csv', 'excel',
                'pdf',
                {
                    extend: 'pdfHtml5',
                    download: 'open',
                    exportOptions: {
                        columns: ':visible'
                    }
                ");
                WriteLiteral(@"},
                {
                    extend: 'print',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                'colvis'
            ],
            columnDefs: [
                {
                    targets: [-1],
                    visible: false
                }
            ],
            ""fnInitComplete"": function (oSettings, json) {

            },
            ""fnDrawCallback"": function (oSettings) {

                $("".viewScoreBtn"").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    $.ajax(
                        {
                            url: ""/TaskAssignment/ViewScore"",
                            contentType: 'aplication/json;charset=utf-8',
                            type: ""GET"",
                            datatype: 'html',
           ");
                WriteLiteral(@"                 data: { periodDefinitionId: $(this).attr(""periodDefinitionId"") },
                            success: function (data, textStatus, jqXHR) {
                                $(""#modalPlace"").html(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(""erorr"");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $("".editTaskAssignmentBtn"").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    $.ajax(
                        {
                            url: ""/TaskAssignment/EditTaskAssignment"",
               ");
                WriteLiteral(@"             contentType: 'aplication/json;charset=utf-8',
                            type: ""GET"",
                            datatype: 'html',
                            data: {
                                periodDefinitionId: row.data().PeriodDefinitoionId
                                , departmentId: row.data().AllocatorEvaluationHierarchyId
                                , allocatorPersonId: row.data().AllocatorPersonId
                                , title: row.data().Title
                                , resourceType: row.data().ResourceType
                                , taskId: row.data().TaskId
                                , participantConfirmation: row.data().participantConfirmation
                                , evaluationId: row.data().EvaluationId
                                , parentTaskId: row.data().ParentTaskId
                            },
                            success: function (data, textStatus, jqXHR) {
                                $(""#mod");
                WriteLiteral(@"alPlace"").html(data);
                                $('.criteriaSwitch').bootstrapSwitch();
                                $('.trainingNeedSwitch').bootstrapSwitch();
                                if (data.notAllowed) {
                                    var message = """";
                                    message += ""<span> جهت ویرایش وظایف شکسته شده تخصیصی، فقط از آنهایی که نیازآموشی یا سایرارزیاب دارند امکان پذیر می باشد. </span><br><br>"" +
                                        ""<span>وظایفی که فقط خود اختصاص دهنده آن هستید قابل ویرایش می باشد.</span><br><br>"";
                                    toastr.options.timeOut = ""15000"";
                                    toastr.options.positionClass = ""toast-top-center"";
                                    toastr.info(message);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(""erorr"");
                       ");
                WriteLiteral(@"         alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $("".deleteTaskAssignmentBtn"").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    EvaluationView = {};
                    EvaluationView.PeriodDefinitionId = row.data().PeriodDefinitoionId;
                    EvaluationView.AllocatorDepartmentId = row.data().AllocatorEvaluationHierarchyId;
                    EvaluationView.allocatorPersonId = row.data().AllocatorPersonId;
                    EvaluationView.HasParticipant = row.data().hasParticipant;
                    EvaluationView.ResourceType = row.data().ResourceType;
                    EvaluationView.EvaluationId = row.data().Evaluatio");
                WriteLiteral(@"nId;
                    EvaluationView.TaskTitle = row.data().Title;

                    console.log(EvaluationView);
                    $.ajax(
                        {
                            //data:postdata,
                            url: '/TaskAssignment/DeleteTaskAssignmentPartial',
                            //url : formURL,
                            //data: postdata,
                            data: JSON.stringify(EvaluationView),
                            //data: ""firstName="" + $(""fn"").val(),
                            //cache: false,
                            //contentType: false,
                            //processData: false,
                            datatype: 'json',
                            contentType: 'application/json; charset=utf-8',
                            type: 'POST',
                            success: function (data, textStatus, jqXHR) {
                                $(""#modalPlace"").html(data);

                                if (d");
                WriteLiteral(@"ata.notAllowed) {
                                    var message = """";
                                    message += ""<span>وظایفی که فقط خود اختصاص دهنده آن هستید قابل حذف می باشد.</span><br><br>"";
                                    toastr.options.timeOut = ""15000"";
                                    toastr.options.positionClass = ""toast-top-center"";
                                    toastr.info(message);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(""erorr"");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                $("".refutationCauseBtn"").click(function () {
                    $('#taskAssignmentTable >tbody>tr').each(function () {
                        $(this).removeClass('selected');
                    })
      ");
                WriteLiteral(@"              var tr = $(this).closest('tr');
                    var row = dt.row(tr);

                    $.ajax(
                        {
                            url: '/TaskAssignment/RefutationCauseLookAt',
                            data: {
                                title: row.data().Title
                                , evaluationId: row.data().EvaluationId
                            },
                            datatype: 'html',
                            type: 'POST',
                            success: function (data, textStatus, jqXHR) {
                                $(""#modalPlace"").html(data);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                alert(""erorr"");
                                alert(jqXHR);
                                alert(textStatus);
                            }
                        });
                });
                // Array to track ");
                WriteLiteral(@"the ids of the details displayed rows
                var detailRows = [];
                $('.details-control').on('click', function () {
                    var tr = $(this).closest('tr');
                    var row = dt.row(tr);
                    var idx = $.inArray(tr.attr('id'), detailRows);

                    if (row.child.isShown()) {
                        tr.removeClass('details');
                        row.child.hide();

                        // Remove from the 'open' array
                        detailRows.splice(idx, 1);
                    }
                    else {
                        tr.addClass('details');
                        row.child(getCriteria(row.data())).show();

                        // Add to the 'open' array
                        if (idx === -1) {
                            detailRows.push(tr.attr('id'));
                        }
                    }
                });
                // On each draw, loop over the `detailRows` arra");
                WriteLiteral(@"y and show any child rows
                dt.on('draw', function () {
                    $.each(detailRows, function (i, id) {
                        $('#' + id + ' td.details-control').trigger('click');
                    });
                });
            },
            ""pagingType"": ""full_numbers"",
            ""lengthMenu"": [
                [50, 25, 10, -1],
                [50, 25, 10, ""All""]
            ],
            ""columnDefs"": [
                { ""orderable"": false, ""targets"": [9, 10, 11, 12, 13] }
            ],
            ""processing"": true,
            ""serverSide"": true,
            ""ajax"": {
                ""url"": ""/TaskAssignment/GetAssignedTaskList"",
                ""type"": ""Post"",
                ""data"": function (d) {
                    d.employeeId2 = $('#employeeId').children('option:selected').val(),
                        d.periodDefinitionIdDT2 = $('#periodDefinitionIdDT').children('option:selected').val(),
                        d.departmentIdDT = $('#d");
                WriteLiteral(@"epartmentId').children('option:selected').val()
                },
                //""contentType"": 'application/json; charset=utf-8',
                //""cache"": false,
                ""dataType"": ""json"",
                //'data': function (data) {
                //    data = JSON.stringify(data)
                //    return data;
                //}
            },
            ""aoColumns"": [
                {
                    ""mData"": ""PeriodCode"",
                },
                {
                    ""mData"": ""PeriodTitle""
                },
                {
                    ""mData"": ""allocatorFullName"",
                    ""render"": function (data, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""allocatorDepartmentName"",
                    ""render"": function (dat");
                WriteLiteral(@"a, type, row, meta) {
                        if (data == null) {
                            data = '----'
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""allocatorRoleName"",
                    ""render"": function (data, type, row, meta) {
                        if (data == ""PlanningAdmin"") {
                            data = 'ادمین برنامه ریزی'
                        }
                        else if (data == ""Coacher"") {
                            data = 'مربی'
                        }
                        else if (data == ""HRAdmin"") {
                            data = 'ادمین سرمایه انسانی'
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""text""
                },
                {
                    ""mData"": ""Title""
                },
                {
            ");
                WriteLiteral(@"        ""mData"": ""TaskWeight""
                },
                {
                    ""mData"": ""ResourceType"",
                    ""render"": function (data, type, row, meta) {
                        if (data == ""1"") {
                            data = ""اهداف کلان"";
                        }
                        else if (data == ""2"") {
                            data = ""وظایف عمومی"";
                        }
                        else if (data == ""3"") {
                            data = ""وظایف شکسته شده"";
                        } else if (data == ""4"") {
                            data = ""وظایف متنی"";
                        }
                        return data;
                    }
                },
                {
                    ""mData"": ""EvaluationAcceptanceStatusId"",
                    ""className"": ""text-center"",
                    ""render"": function (data, type, row, meta) {
                        if (data == ""1"") {
                            data = ""<span");
                WriteLiteral(@" class='label label-sm label-success'>تفاهم</span>"";
                        }
                        else if (data == ""2"") {
                            data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-warning'>ابلاغی</span></a>"";
                        }
                        else if (data == ""3"") {
                            data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-info'>صرف نظر</span></a>"";
                        } else if (data == ""4"") {
                            data = ""<a href='#' data-toggle='modal' class='btn refutationCauseBtn'><span class='label label-sm label-danger'>نامشخص</span></a>"";
                        }
                        return data;
                    }
                },
                //{
                //    ""mData"": ""hasParticipant"",
                //    ""render"": function (data, type, row, meta) {
                //        if (data");
                WriteLiteral(@" == ""1"") {
                //            if (row.participantConfirmation == 0) {
                //                data = ""<span class='label label-sm label-info'>عدم پذیرش</span>"";
                //            } else if (row.participantConfirmation == 1) {
                //                data = ""<span class='label label-sm label-success'>پذیرش</span>"";
                //            } else if (row.participantConfirmation == null) {
                //                data = ""<span class='label label-sm label-warning'>نامشخص</span>"";
                //            }
                //        } else {
                //            data = 'فاقد سایرارزیاب';
                //        }
                //        return data;
                //    }
                //},
                {
                    ""mData"": null,
                    ""render"": function (data, type, row, meta) {
                        data = ""<a href='#' data-toggle='modal' periodDefinitionId="" + row.PeriodDefinitoionId + """);
                WriteLiteral(@" class='btn viewScoreBtn'><i class='fa fa-eye'></i></a>"";
                        return data;
                    }
                },
                {
                    ""mData"": null,
                    ""render"": function (data, type, row, meta) {
                        data = ""<a href='#' data-toggle='modal' class='btn editTaskAssignmentBtn'><i class='fa fa-edit'></i></a>"";
                        return data;
                    }
                },
                {
                    ""mData"": null,
                    ""render"": function (data, type, row, meta) {
                        data = ""<a href='#' data-toggle='modal' class='btn deleteTaskAssignmentBtn'><i class='fa fa-trash-o'></i></a>"";
                        return data;
                    }
                },
                {
                    ""class"": ""details-control"",
                    ""orderable"": false,
                    ""data"": null,
                    ""defaultContent"": """"
                }
      ");
                WriteLiteral(@"      ]
        });
    }
    show_dataTable();

    function resetFormValidation() {
        optgroupId = 0;
        $("".chk-click"").each(function () {
            if ($(this).is("":checked"")) {
                $(this).parent(""span"").removeClass(""checked"");
            }
        })
        $('#subTaskResource').addClass(""hidden"");
        $(""#subTaskCollapse .row:gt(0)"").remove();
        i = 1;
        $('#textResource').addClass(""hidden"");
        $(""#collapseTextTask .row:gt(0)"").remove();
        $(""#critriaPlaceHolder .modal "").remove();
        j = 1;
        citeriaModalIndex = 1;
        citeriaRowIndex = 1;
        $("".select2-chosen"").html("""");
        $(""#assistant"").empty();
        $(""#assistant"").select2(""val"", """");
        $(""#management"").empty();
        $(""#management"").select2(""val"", """");
        $(""#chairmanship"").empty();
        $(""#chairmanship"").select2(""val"", """");
        $(""#department"").empty();
        $(""#department"").select2(""val"", """");
        $(""#e");
                WriteLiteral(@"mployee"").empty();
        $(""#employee"").select2(""val"", """");
        //Begin of reset form validation
        $("".input-icon .fa-warning"").addClass('fa').removeClass('fa-warning');
        $("".input-icon .fa-check"").addClass('fa').removeClass('fa-check');
        $("".alert-danger"").hide();
        $('.form-group').removeClass('has-error');
        $('.form-group').removeClass('has-success');
        //End of reset form validation
    }
    $('#task_assign').on('hidden.bs.modal', function () {
        clicked = false;
        //resetFormValidation();
        //$(""#taskAssignmentForm"")[0].reset();
    });

    $(""#taskAssignmentTable_filter"").after(""<div id='dataTables_filter_employee' class='dataTables_filter input-DT hidden'><label>انتخاب کارمند :<select name='employeeId' id='employeeId' class='form-control input-medium'></select></label></div>"");

    $(""#taskAssignmentTable_filter"").after(""<div id='dataTables_filter_subSet' class='dataTables_filter input-DT hidden'><label><select name='su");
                WriteLiteral(@"bSetDepartmentIdDT' id='subSetDepartmentIdDT' class='form-control input-medium'></select></label></div>"");

    $(""#taskAssignmentTable_filter"").after(""<div id='departmentIdDT' class='dataTables_filter input-DT'><label>انتخاب رده سازمانی:<select name='departmentId' id='departmentId' class='form-control input-medium'></select></label></div>"");

    $(""#taskAssignmentTable_filter"").after(""<div class='dataTables_filter input-DT'><label>انتخاب دوره:<select name='periodDefinitionIdDT' id='periodDefinitionIdDT' class='form-control input---medium'></select></label></div>"");

    $(""#taskAssignmentTable_filter"").after(""<div class='clearfix'></div>"");

    $.ajax({
        type: 'get',
        url: '/share/GetPeriodDefinitionList',
        //data: { roleId: roleId },
        success: function (periodDefinition) {
            $(""#periodDefinitionIdDT"").empty();
            //$(""#periodDefinitionIdDT"").append(""<option></option>"");
            var max = 0;
            $(periodDefinition).each(function (i,");
                WriteLiteral(@" p) {
                //$(""#parentName"").select2(""val"", d.departmentId);
                if (p.periodDefinitoionId > max) {
                    max = p.periodDefinitoionId;
                }
                $(""#periodDefinitionIdDT"").append(""<option value='"" + p.periodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
            })
            $(""#periodDefinitionIdDT"").val(max);
            $('#periodDefinitionIdDT').trigger('change');
        },
        error: function (status) {
            alert(""Error"");
        }
    })

    $('#periodDefinitionIdDT').on('change', function () {
        $(""#dataTables_filter_subSet"").addClass(""hidden"");
        $(""#subSetDepartmentIdDT"").empty();
        $(""#dataTables_filter_employee"").addClass(""hidden"");
        $(""#employeeId"").empty();
        $(""#subSetDepartmentIdDT"").append(""<option></option>"");

        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDepartmentResponsibiltyList',
          ");
                WriteLiteral(@"  data: { periodDefinitionId: $('#periodDefinitionIdDT').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {

                $(""#departmentIdDT #departmentId"").empty();
                $(""#departmentIdDT #departmentId"").append(""<option></option>"");

                $(DepartmentResponsibilty).each(function (i, p) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#departmentId"").append(""<option value='"" + p.evaluationHierarchyId + ""'>"" + p.shortName + ""</option>"");
                    if (p.positionType == 1) {
                        $(""#departmentId"").val(p.evaluationHierarchyId);
                        $(""#departmentId"").trigger('change');
                    }
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    function formatResult(node) {
        var level = 0;
        var $result
        if (node.eleme");
                WriteLiteral(@"nt !== undefined) {
            level = (node.element.className);
            if (level.trim() !== '') {
                level = (parseFloat(level.match(/\d+/)[0]));
            }

            if (node.element.className == 'level_0' || node.element.className == 'level_1') {
                $result = $('<span style=""padding-right:' + (20 * level) + 'px;font-weight: bold;"" > ' + node.text + '</span>');
            } else {
                $result = $('<span style=""padding-right:' + (20 * level) + 'px;"" > ' + node.text + '</span>');

            }
        }


        return $result;
    }
    function buildHierarchy(arry) {

        var roots = [], children = {};

        // find the top level nodes and hash the children based on parent
        for (var i = 0, len = arry.length; i < len; ++i) {
            var item = arry[i],
                p = item.parent,
                target = !p ? roots : (children[p] || (children[p] = []));
            target.push({ value: item });
        }
");
                WriteLiteral(@"
        // function to recursively build the tree
        var findChildren = function (parent) {
            if (children[parent.value.EvaluationHierarchyId]) {
                parent.children = children[parent.value.EvaluationHierarchyId];
                $(parent.children).each(function (i, p) {
                    //$(""<option class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + parent.value.EvaluationHierarchyId + ""']"");
                    if ($(""#subSetDepartmentIdDT option[parent='"" + p.value.parent + ""']:last"").length > 0) {
                        $(""<option parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[parent='"" + p.value.parent + ""']:last"");
                    } else {
                        $(""<option parent="" + pa");
                WriteLiteral(@"rent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + p.value.parent + ""']"");
                    }

                })
                for (var i = 0, len = parent.children.length; i < len; ++i) {

                    findChildren(parent.children[i]);
                }
            }
        };

        // enumerate through to handle the case where there are multiple roots
        for (var i = 0, len = roots.length; i < len; ++i) {
            $(roots).each(function (i, p) {
                $(""#subSetDepartmentIdDT"").append(""<option parent="" + p.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"");
            })
            findChildren(roots[i]);
        }

        return roots;
    }
    $('#departmentId').on('change', function () {
        //i");
                WriteLiteral(@"f ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
        //    dt.ajax.reload();
        //}
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetSubSetDepartments',
            data: { departmentId: $('#departmentId').children('option:selected').val() },
            success: function (DepartmentResponsibilty) {
                $(""#dataTables_filter_subSet"").addClass(""hidden"");
                $(""#subSetDepartmentIdDT"").empty();
                $(""#dataTables_filter_employee"").addClass(""hidden"");
                $(""#employeeId"").empty();
                $(""#subSetDepartmentIdDT"").append(""<option></option>"");
                if (DepartmentResponsibilty.length > 1) {
                    $(""#dataTables_filter_subSet"").removeClass(""hidden"");
                    var items = DepartmentResponsibilty;
                    buildH");
                WriteLiteral(@"ierarchy(items);
                    //$(""#subSetDepartmentIdDT option[class='level_0']"").attr(""disabled"", ""disabled"");
                    $('#subSetDepartmentIdDT').select2({
                        placeholder: ""انتخاب واحد زیر مجموعه"",
                        allowClear: true,
                        width: ""300px"",
                        templateResult: formatResult
                    });
                } else if (DepartmentResponsibilty.length == 1) {
                    $(""#dataTables_filter_subSet"").addClass(""hidden"");
                    $.ajax({
                        type: 'get',
                        url: '/TaskAssignment/GetDirectEmployees',
                        data: {
                            departmentId: $('#departmentId').children('option:selected').val()
                            , isSupervisor: true
                        },
                        success: function (subSetEmployees) {
                            $(""#employeeId"").empty();
                 ");
                WriteLiteral(@"           $(""#employeeId"").append(""<option></option>"");
                            $(subSetEmployees).each(function (i, p) {
                                $(""#employeeId"").append(""<option value='"" + p.PeopleId + ""-"" + p.EvaluationHierarchyID + ""'>"" + p.FullName + ""</option>"");
                            })
                            $(""#dataTables_filter_employee"").removeClass(""hidden"");
                        },
                        error: function (status) {
                            alert(""Error"");
                        }
                    })
                }

            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    $('#subSetDepartmentIdDT').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
        //    dt.ajax.reloa");
                WriteLiteral(@"d();
        //}
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDirectEmployees',
            data: { departmentId: $('#subSetDepartmentIdDT').children('option:selected').val() },
            success: function (subSetEmployees) {
                $(""#employeeId"").empty();
                $(""#employeeId"").append(""<option></option>"");
                $(subSetEmployees).each(function (i, p) {
                    $(""#employeeId"").append(""<option isSupervisor="" + p.IsSupervisor + "" value='"" + p.PeopleId + ""-"" + p.EvaluationHierarchyID + ""'>"" + p.FullName + ""</option>"");
                })
                $(""#employeeId option[issupervisor='true']"").css(""font-weight"", ""bold"");
                $(""#dataTables_filter_employee"").removeClass(""hidden"");
            },
            error: function (status) {
                alert(""Error"");
            }
        })
    });

    $('#employeeId').on('change', function () {
        //if ($('#periodDefinitionIdDT').children('");
                WriteLiteral(@"option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
        dt.ajax.url(""/TaskAssignment/GetAssignedTaskList"");
        dt.ajax.reload();
        //}
    })
    $(""#reload"").click(function () {
        $(""#employeeId"").val("""");
        $(""#departmentId"").val("""");
        dt.ajax.url(""/TaskAssignment/GetAssignedTaskList"");
        dt.ajax.reload();
        $(""#periodDefinitionIdDT"").val(null);
        $(""#subSetDepartmentIdDT"").val("""").select2();
        $(""#dataTables_filter_employee"").addClass(""hidden"");
        $(""#dataTables_filter_subSet"").addClass(""hidden"");
        $(""#departmentId"").empty();
    })

    $(""#taskAssignmentToIndirectBtn"").click(function () {
        $.ajax(
            {
                url: ""/TaskAssignment/IndirectTaskAssignment"",
                contentType: 'aplication/json;charset=utf-8',
                type: ""GET"",
                datatype: 'html',

                success: function (data, textStatus, jqXHR) {
  ");
                WriteLiteral(@"                  $(""#modalPlace"").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""erorr"");
                    alert(jqXHR);
                    alert(textStatus);
                }
            }).always(function () {

            });
    });
    
    $(""#taskAssignmentTransferBtn"").click(function () {
        $.ajax(
            {
                url: ""/TaskAssignment/TransferTaskAssignment"",
                contentType: 'aplication/json;charset=utf-8',
                type: ""GET"",
                datatype: 'html',

                success: function (data, textStatus, jqXHR) {
                    $(""#modalPlace"").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""erorr"");
                    alert(jqXHR);
                    alert(textStatus);
                }
            }).always(function () {

            });
    });
    $(");
                WriteLiteral(@"""#weightAssignmentBtn"").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val() != """" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != """" && $('#employeeId').children('option:selected').val() != null) {
            $.ajax(
                {
                    url: ""/TaskAssignment/WeightAssignment"",
                    contentType: 'aplication/json;charset=utf-8',
                    type: ""GET"",
                    datatype: 'html',
                    async: false,
                    success: function (data, textStatus, jqXHR) {
                        $(""#modalPlace"").html(data);
                    },
                    error: function (jqXHR, text");
                WriteLiteral(@"Status, errorThrown) {
                        alert(""erorr"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert(""دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد"");
        }
    });
    $("".scoreAssignmentBtn"").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#periodDefinitionIdDT').children('option:selected').val() != null && $('#departmentId').children('option:selected').val() != """" && $('#departmentId').children('option:selected').val() != null && $('#employeeId').children('option:selected').val() != """" && $('#employeeId').children('option:selected').val() != null) {
            $.ajax(
                {
                    url: ""/TaskAssignment/ScoreAssignment"",
                    conte");
                WriteLiteral(@"ntType: 'aplication/json;charset=utf-8',
                    type: ""GET"",
                    datatype: 'html',
                    data: { CoacherType: $(this).attr(""coacherType""), Level: dt.data()[0].Levell },
                    success: function (data, textStatus, jqXHR) {
                        $(""#modalPlace"").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(""erorr"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert(""دوره و رده سازمانی و انتخاب زیر مجموعه و کارمند می بایست در حالت انتخاب باشد"");
        }
    });
    $(""#renewContract"").click(function () {
        if (!dt.data().count()) {
            alert('وظیفه ای برای انتخاب وجود ندارد');
        }
        else if ($('#periodDefinitionIdDT').children('option:selected').val() != """" && $('#departmentId').children('option:selecte");
                WriteLiteral(@"d').val() != """") {
            $.ajax(
                {
                    url: ""/TaskAssignment/RenewContract"",
                    contentType: 'aplication/json;charset=utf-8',
                    type: ""GET"",
                    datatype: 'html',
                    //data: { CoacherType: $(this).attr(""coacherType"") },
                    success: function (data, textStatus, jqXHR) {
                        $(""#modalPlace"").html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(""erorr"");
                        alert(jqXHR);
                        alert(textStatus);
                    }
                });
        }
        else {
            alert(""دوره و سمت سازمانی می بایست در حالت انتخاب باشد"");
        }
    });
    $(""#taskAssignmentTable tbody"").on('click', 'tr', function () {
        $(this).toggleClass('selected');
    });
    $(""#taskAssignmentBtn"").click(function () {
        $.ajax(
 ");
                WriteLiteral(@"           {
                url: ""/TaskAssignment/DirectTaskAssignment"",
                contentType: 'aplication/json;charset=utf-8',
                type: ""GET"",
                datatype: 'html',
                //data: { CoacherType: $(this).attr(""coacherType"") },
                success: function (data, textStatus, jqXHR) {
                    $(""#modalPlace"").html(data);
                    //this always must have 1  periodDefinitionId
                    $(""#periodDefinitionId option:eq(1)"").attr(""selected"", ""selected"")
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""erorr"");
                    alert(jqXHR);
                    alert(textStatus);
                }
            });
    });

    $(""#subsetTaskScore"").one(""click"", function () {
        $.ajax(
            {
                //url: ""/ProtestAddressee/AddAddresseeResponse"",
                //contentType: 'aplication/json;charset=utf-8',
                /");
                WriteLiteral(@"/type: ""GET"",
                //datatype: 'html',

                url: '/TaskAssignment/SubSetScorePartial',
                //url : formURL,
                //data: postdata,
                //data: JSON.stringify(ProtestResponse),
                //data: ""firstName="" + $(""fn"").val(),
                //cache: false,
                //contentType: false,
                //processData: false,
                datatype: 'json',
                contentType: 'application/json; charset=utf-8',
                type: 'get',

                success: function (data, textStatus, jqXHR) {
                    $(""#tab_5_2"").html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""erorr"");
                    alert(jqXHR);
                    alert(textStatus);
                }
            });
    })
</script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
