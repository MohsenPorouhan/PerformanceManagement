#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\IndirectTaskAssignment.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b66d3c3aaaceefb1fa2115cc34dcda6c4ce9aba9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_TaskAssignment_IndirectTaskAssignment), @"mvc.1.0.view", @"/Views/Coacher/TaskAssignment/IndirectTaskAssignment.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/TaskAssignment/IndirectTaskAssignment.cshtml", typeof(AspNetCore.Views_Coacher_TaskAssignment_IndirectTaskAssignment))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b66d3c3aaaceefb1fa2115cc34dcda6c4ce9aba9", @"/Views/Coacher/TaskAssignment/IndirectTaskAssignment.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_TaskAssignment_IndirectTaskAssignment : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("IndirectAssignmentFrm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\IndirectTaskAssignment.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(29, 6444, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b66d3c3aaaceefb1fa2115cc34dcda6c4ce9aba96031", async() => {
                BeginContext(100, 4460, true);
                WriteLiteral(@"
    <div class=""modal fade department modalClass"" id=""indirectAssignModal"" aria-hidden=""true"" data-backdrop=""static"">
        <div class=""modal-dialog modal-wide"">
            <div class=""modal-content"">
                <div class=""modal-header bg-blue"">
                    <button type=""button"" id=""modal-close"" class=""close""
                            data-dismiss=""modal"" aria-hidden=""true""></button>
                    <h4 id=""sabt_hazine_personnel"" class=""modal-title"">
                        <i class=""fa fa-file-o""></i>
                        اختصاص متنی به نفرات غیر مستقیم
                    </h4>
                </div>

                <div class=""modal-body"">
                    <div class=""form-body"">

                        <div id=""alert_danger"" class=""alert alert-danger display-hide"">
                            <button class=""close"" data-close=""alert""></button>
                            <span></span><br />
                            پر کردن فيلدهاي ستاره دار یا قرمز رنگ ");
                WriteLiteral(@"مربوط به وظایف و شاخص ها اجباري مي باشد.
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        انتخاب دوره
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""periodDefinitionId2"" id=""periodDefinitionId2"" class=""form-control input-medium""></select>
                                        </div>
                                    </div>
                        ");
                WriteLiteral(@"        </div>
                            </div>
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label id=""mojri_name_label"" class=""control-label col-md-3"">
                                        انتخاب مسئولیت واحد سازمانی
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""departmentSupervisor2"" id=""departmentSupervisor2"" class=""form-control input-medium""></select>
                                        </div>
                                    </div>
                                </div>
       ");
                WriteLiteral(@"                     </div>
                        </div>
                        <div class=""row"">
                            <!--/span-->
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label id=""mojri_name_label"" class=""control-label col-md-3"">
                                        انتخاب کارمندان غیرمستقیم
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""subSetEmployeeId"" id=""subSetEmployeeId"" class=""select2 selectt2 form-control input-medium"" multiple></select>
                               ");
                WriteLiteral(@"         </div>
                                    </div>
                                </div>
                            </div>
                            <!--/span-->
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
");
                EndContext();
                BeginContext(5474, 992, true);
                WriteLiteral(@"                                    <a href=""#"" id=""addTextResource2"" class=""btn green btn-add"">
                                        افزودن فعالیت <i class=""fa fa-plus""></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div id=""textTaskContainer""></div>
                    </div>
                    <!-- END FORM-->
                </div>

                <div class=""modal-footer"">
                    <button type=""submit"" class=""btn green input-sm input-small"" id=""indirectAssignBTN"">ذخيره</button>
                    <button type=""button"" class=""btn red input-sm input-small"" id=""cancel2"" data-dismiss=""modal""><i class=""fa fa-times""></i>انصراف</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <div id=""critriaModalPlaceHolder""></div>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(6473, 1647, true);
            WriteLiteral(@"
<script type=""text/html"" id=""appendTextTask2"">
    <div class=""row"" index=""{0}"">
        <div class=""col-md-12"">
            <div class=""form-group"">
                <label class=""control-label col-md-0"">
                    {0}
                </label>
                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <input type=""text"" id=""textTaskInputt{0}"" name=""textTaskInputt{0}"" class=""form-control textTaskInputt"" placeholder=""تایپ وظیفه مورد نظر"" />
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-4"">
            <div class=""form-group"">
                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <textarea id=""tagEditorTextTaskk{0}"" name=""tagEditorTextTaskk{0}"" class=""form-control tag-editor-hidden-src tagEditorCriteriaa""></textarea>");
            WriteLiteral(@"
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-2 hidden"">
            <div class=""form-group"">
                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <select id=""participantt2Select2{0}"" name=""participantt2Select2{0}"" class=""select2 selectt2 participantt2Select2 form-control""></select>
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-5"">
            <div class=""form-group"">
");
            EndContext();
            BeginContext(8294, 2599, true);
            WriteLiteral(@"                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <select id=""relatedWithTextTask{0}"" name=""relatedWithTextTask{0}"" class=""select2 relatedWithTextTask form-control""></select>
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-2"">
            <button id=""criteriaBtnn{0}"" type=""button"" loadCriteria=""false"" index=""{0}"" data-toggle=""modal"" @*href=""#criteriaModal{0}"" *@ class=""btn btn-link criteriaBtnn"">تعریف شاخص ها</button>
        </div>
        <a href=""#"" index=""{0}"" class=""btn btn-xs purple removeTextTaskBtnn"">
            <i class=""fa fa-times""></i>
        </a>
    </div>
</script>
<script type=""text/html"" id=""addCriteriaa2"">
    <div class=""modal fade department modalClass"" id=""criteriaModall{0}"" aria-hidden=""true"">
        <div class=""modal-dialog modal-lg"">
            <div class=""modal-content"">
                <div c");
            WriteLiteral(@"lass=""modal-header bg-blue"">
                    <button type=""button"" id=""modal-close"" class=""close""
                            data-dismiss=""modal"" aria-hidden=""true""></button>
                    <h4 class=""modal-title"">
                        <i class=""fa fa-file-o""></i>
                        تعریف شاخص برای وظیفه {0}
                    </h4>
                </div>

                <div class=""modal-body"">
                    <div class=""form-body"">

                        <div id=""alert_danger"" class=""alert alert-danger display-hide"">
                            <button class=""close"" data-close=""alert""></button>
                            پر کردن فيلدهاي ستاره دار اجباري مي باشد.
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <a href=""#"" id=""addCriteriaBtnn{0}"" index=""{0}"" class=""btn green btn-add addCriteriaBtn");
            WriteLiteral(@"n"">
                                        افزودن شاخص <i class=""fa fa-plus""></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                        <div id=""criteriaRoww{0}""></div>


                    </div>
                    <!-- END FORM-->
                </div>

                <div class=""modal-footer"">
                    <button type=""button"" class=""btn green input-sm input-small"" data-dismiss=""modal"">تایید</button>
");
            EndContext();
            BeginContext(11055, 318, true);
            WriteLiteral(@"                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
</script>
<script type=""text/html"" id=""addCriteriaRow2"">
    <div class=""row"">
        <!--/span-->
        <div class=""col-md-12"">
            <div class=""form-group"">
");
            EndContext();
            BeginContext(11607, 446, true);
            WriteLiteral(@"                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <input type=""text"" name=""criteriaTitlew{0}"" id=""criteriaTitlee{0}"" class=""form-control criteriaTitlee"" placeholder=""عنوان"" />
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-6"">
            <div class=""form-group"">
");
            EndContext();
            BeginContext(12293, 452, true);
            WriteLiteral(@"                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <input type=""text"" name=""calculationWay{0}"" id=""calculationWay{0}"" class=""form-control calculationWay"" placeholder=""نحوه محاسبه"" />
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-3"">
            <div class=""form-group"">
");
            EndContext();
            BeginContext(12982, 458, true);
            WriteLiteral(@"                <div class=""col-md-12"">
                    <div class=""input-icon right"">
                        <i class=""fa""></i>
                        <input type=""text"" name=""limitOfAdmissionn{0}"" id=""limitOfAdmissionn{0}"" class=""form-control limitOfAdmissionn"" placeholder=""حد پذیرش"" />
                    </div>
                </div>
            </div>
        </div>
        <div class=""col-md-2"">
            <div class=""form-group"">
");
            EndContext();
            BeginContext(13487, 25440, true);
            WriteLiteral(@"                <div class=""checkbox-list"">
                    <label>
                        <input type=""checkbox"" name=""isProcessingCriteria{0}"" id=""isProcessingCriteria{0}""> آیا از شاخص های شناسنامه فرآیند می باشد؟
                    </label>
                </div>
            </div>
        </div>
        <a href=""#"" index=""{0}"" class=""btn btn-xs purple removeTextCriteriaBtnn"">
            <i class=""fa fa-times""></i>
        </a>
    </div>
    <hr />
</script>
<script>
    $(document).ready(function () {
        $('#indirectAssignModal').modal('show');
        $('.selectt2').select2({
            placeholder: ""انتخاب کنید"",
            allowClear: true
        });
        $('#departmentSupervisor2').on('change', function () {
            //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
            //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
            //    dt.ajax.reload();
 ");
            WriteLiteral(@"           //}
            $.ajax({
                type: 'get',
                url: '/TaskAssignment/GetInDirectEmployees',
                data: {
                    departmentId: $('#departmentSupervisor2').children('option:selected').val().split(""-"")[0],
                    peopleId: $('#departmentSupervisor2').children('option:selected').val().split(""-"")[1]
                },
                success: function (DepartmentResponsibilty) {
                    $(""#subSetEmployeeId"").empty();
                    $(""#subSetEmployeeId"").append(""<option></option>"");


                    var items = DepartmentResponsibilty;
                    buildHierarchy2(items);
                    $(""#subSetEmployeeId option[class='level_0']"").attr(""disabled"", ""disabled"");
                    $(""#subSetEmployeeId option[class='level_1']"").attr(""disabled"", ""disabled"");

                    $('#subSetEmployeeId').select2({
                        placeholder: ""انتخاب واحد زیر مجموعه"",
                  ");
            WriteLiteral(@"      allowClear: true,
                        width: ""300px"",
                        templateResult: formatResult
                    });
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        });
        $.ajax({
            type: 'get',
            url: '/share/GetPeriodDefinition',
            //data: { roleId: roleId },
            success: function (periodDefinition) {
                $(""#periodDefinitionId2"").empty();
                //$(""#periodDefinitionId2"").append(""<option></option>"");

                $(periodDefinition).each(function (i, p) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#periodDefinitionId2"").append(""<option value='"" + p.periodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
                })
            },
            error: function (status) {
                alert(""Error"");
            }
   ");
            WriteLiteral(@"     })
        $.ajax({
            type: 'get',
            url: '/TaskAssignment/GetDepartmentSupervisorList',
            async: false,
            //data: { roleId: roleId },
            success: function (department) {
                $(""#departmentSupervisor2"").empty();
                $(""#departmentSupervisor2"").append(""<option></option>"");

                $(department).each(function (i, d) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    var hasPrimaryPosition = false;
                    if (d.PositionType == 1) {
                        hasPrimaryPosition = true;
                        $(""#departmentSupervisor2"").append(""<option selected value='"" + d.EvaluationHierarchyId + ""-"" + d.PeopleId + ""'>"" + d.ShortName + ""</option>"");
                        $('#departmentSupervisor2').trigger('change');
                    } else {
                        $(""#departmentSupervisor2"").append(""<option value='"" + d.EvaluationHierarchyId + ""-"" + d");
            WriteLiteral(@".PeopleId + ""'>"" + d.ShortName + ""</option>"");
                    }
                    if (!hasPrimaryPosition) {
                        $(""#departmentSupervisor2"").val($('#departmentSupervisor2').children('option').first().next().val());
                        $('#departmentSupervisor2').trigger('change');
                    }
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
        function formatResult(node) {
            var level = 0;
            var $result
            if (node.element !== undefined) {
                level = (node.element.className);
                if (level.trim() !== '') {
                    level = (parseFloat(level.match(/\d+/)[0]));
                }

                if (node.element.className == 'level_0' || node.element.className == 'level_1') {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;font-weight: bold;"" > ' + node.text + '</spa");
            WriteLiteral(@"n>');
                } else {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;"" > ' + node.text + '</span>');

                }
            }


            return $result;
        }
        function buildHierarchy2(arry) {

            var roots = [], children = {};

            // find the top level nodes and hash the children based on parent
            for (var i = 0, len = arry.length; i < len; ++i) {
                var item = arry[i],
                    p = item.parent,
                    target = !p ? roots : (children[p] || (children[p] = []));
                target.push({ value: item });
            }

            // function to recursively build the tree
            var findChildren2 = function (parent) {
                if (children[parent.value.EvaluationHierarchyId]) {
                    parent.children = children[parent.value.EvaluationHierarchyId];
                    $(parent.children).each(function (i, p) {
                  ");
            WriteLiteral(@"      //$(""<option class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + parent.value.EvaluationHierarchyId + ""']"");
                        if ($(""#subSetEmployeeId option[parent='"" + p.value.parent + ""']:last"").length > 0) {
                            $(""<option val="" + p.value.EvalHierarchyId + "" parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHierarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetEmployeeId option[parent='"" + p.value.parent + ""']:last"");
                        } else {
                            $(""<option val="" + p.value.EvalHierarchyId + "" parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHierarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetEmployeeId option[val='"" + p.");
            WriteLiteral(@"value.parent + ""']"");
                        }

                    })
                    for (var i = 0, len = parent.children.length; i < len; ++i) {

                        findChildren2(parent.children[i]);
                    }
                }
            };

            // enumerate through to handle the case where there are multiple roots
            for (var i = 0, len = roots.length; i < len; ++i) {
                $(roots).each(function (i, p) {
                    $(""#subSetEmployeeId"").append(""<option val="" + p.value.EvalHierarchyId + ""  parent="" + p.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHierarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"");
                })
                findChildren2(roots[i]);
            }

            return roots;
        }


        var j = 1;
        var citeriaModalIndex = 1;
        var citeriaRowIndex = 1;

        var template2 = jQuery.validator.format($.trim(");
            WriteLiteral(@"$(""#appendTextTask2"").html()));
        var template3 = jQuery.validator.format($.trim($(""#addCriteriaa2"").html()));
        var template4 = jQuery.validator.format($.trim($(""#addCriteriaRow2"").html()));
        function getParticipant(param) {
            $.ajax({
                type: 'get',
                url: '/share/ParticipantList',
                //data: { roleId: roleId },
                async: false,
                success: function (data) {
                    //$(""select"" + param).empty();
                    $(""select"" + param).append(""<option></option>"");

                    $(data).each(function (i, d) {
                        //$(""#parentName"").select2(""val"", d.departmentId);
                        $(""select"" + param).append(""<option value='"" + d.EvaluationHierarchyId + '-' + d.PeopleId + ""'>"" + d.fullname + ""</option>"");
                    })
                },
                error: function (status) {
                    alert(""Error"");
                }
        ");
            WriteLiteral(@"    })
        }

        function getRelatedTask(param) {
            $.ajax({
                type: 'get',
                url: '/TaskAssignment/RelatedTaskList',
                data: { departmentId: $('#departmentSupervisor2').children('option:selected').val().split(""-"")[0] },
                async: false,
                success: function (data) {
                    //$(""select"" + param).empty();
                    $(""select"" + param).append(""<option></option>"");

                    $(data).each(function (i, d) {
                        //$(""#parentName"").select2(""val"", d.departmentId);
                        $(""select"" + param).append(""<option value='"" + d.taskId + ""'>"" + d.title + ""</option>"");
                    })
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        }
        $(""#addTextResource2"").click(function () {
            var triggerIndex = citeriaModalIndex;

            $(tem");
            WriteLiteral(@"plate2(j++)).appendTo(""#textTaskContainer"");
            $(template3(citeriaModalIndex++)).appendTo(""#critriaModalPlaceHolder"");

            $('#critriaModalPlaceHolder #addCriteriaBtnn' + triggerIndex).trigger('click');

            $(""#tagEditorTextTaskk"" + (j - 1)).tagEditor({
                placeholder: 'نیازهای آموزشی مورد نظر'
            });

            var participantNamee2 = ""#participantt2Select2"" + (j - 1);
            getParticipant(participantNamee2);
            $('#participantt2Select2' + (j - 1)).select2({
                placeholder: ""انتخاب سایر ارزیاب"",
                allowClear: true
            });

            var relatedWithTask = ""#relatedWithTextTask"" + (j - 1);
            getRelatedTask(relatedWithTask);
            $('#relatedWithTextTask' + (j - 1)).select2({
                placeholder: ""در راستای فعالیت"",
                allowClear: true
            });

            $('.textTaskInputt').each(function () {
                $(this).rules(""add"", {
      ");
            WriteLiteral(@"              required: true,
                    messages: {
                        required: ""پرکردن این فیلد الزامی می باشد"",
                    }
                });
            });
            $('.relatedWithTextTask').each(function () {
                $(this).rules(""add"", {
                    required: true,
                    messages: {
                        required: ""پرکردن این فیلد الزامی می باشد"",
                    }
                });
            });
            $("".textTaskInputt"").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: ""/TaskAssignment/PriorTaskOfPeriod"",
                        dataType: ""json"",
                        type: ""get"",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            response(data);
                        }
                ");
            WriteLiteral(@"    });
                },
                minLength: 3,
                select: function (event, ui) {
                    console.log(""Selected: "" + ui.item.value + ""---"" + ui.item.id);
                }
            });
        });

        $(""#textTaskContainer"").on('click', '.criteriaBtnn', function () {
            var index = $(this).attr(""index"");
            $(""#criteriaModall"" + index).modal('show');
        });

        $('#critriaModalPlaceHolder').on('click', '.addCriteriaBtnn', function () {
            var index = $(this).attr(""index"");
            $(template4(citeriaRowIndex++)).appendTo($(""#criteriaRoww"" + index));
            $('.criteriaTitlee').each(function () {
                $(this).rules(""add"", {
                    required: true,
                    messages: {
                        required: ""پرکردن این فیلد الزامی می باشد"",
                    }
                });
            });
            $('.limitOfAdmissionn').each(function () {
                $(t");
            WriteLiteral(@"his).rules(""add"", {
                    required: true,
                    messages: {
                        required: ""پرکردن این فیلد الزامی می باشد"",
                    }
                });
            });
            $('.calculationWay').each(function () {
                $(this).rules(""add"", {
                    required: true,
                    messages: {
                        required: ""پرکردن این فیلد الزامی می باشد"",
                    }
                });
            });
        });

        $(""#indirectAssignBTN"").click(function (e) {
            //alert('dpCreationSubmit');
            //var postdata2 = $(this).serializeArray();
            //debugger;

            var form = $('#IndirectAssignmentFrm');
            var error2 = $('.alert-danger', form);
            var success2 = $('.alert-success', form);

            form.validate({
                //console.log($('#registerform').serializeArray());
                errorElement: 'span', //default input e");
            WriteLiteral(@"rror message container
                errorClass: 'help-block', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: """",
                rules: {
                    periodDefinitionId2: {
                        required: true
                    },
                    departmentSupervisor2: {
                        required: true
                    },
                    subSetEmployeeId: {
                        required: true
                    }
                },
                messages: {
                    periodDefinitionId2: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    },
                    departmentSupervisor2: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    },
                    subSetEmployeeId: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    }
        ");
            WriteLiteral(@"        },
                invalidHandler: function (event, validator) { //display error alert on form submit
                    success2.hide();
                    error2.show();
                    App.scrollTo(error2, -200);
                },
                errorPlacement: function (error, element) { // render error placement for each input type
                    var icon = $(element).parent('.input-icon').children('i');
                    icon.removeClass('fa-check').addClass(""fa-warning"");
                    icon.attr(""data-original-title"", error.text()).tooltip();
                },
                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight

                },
                showErrors: function (errorMap, errorL");
            WriteLiteral(@"ist) {
                    var errors = this.numberOfInvalids();
                    if (errors) {
                        var message = errors == 1
                            ? 'فرم مورد نظر 1 خطا دارد '
                            : 'فرم مورد نظر ' + errors + ' خطا دارد.'
                        message = message + ' لطفا خطا/خطاها را رفع نمایید '
                        $("".alert-danger span "").empty().html(message);
                        error2.show();
                        //console.log(errorList)
                        //console.log(errorMap)
                        //$(errorList).each(function (i, d) {
                        //    console.log(d.message)
                        //})
                    } else {
                        error2.hide();
                    }
                    this.defaultShowErrors();
                },
                success: function (label, element) {
                    var icon = $(element).parent('.input-icon').children('i');
           ");
            WriteLiteral(@"         $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                    icon.removeClass(""fa-warning"").addClass(""fa-check"");
                },

                submitHandler: function (form) {
                    //                    success2.show();
                    //                    error2.hide();
                }
            })
            if (form.valid() == false) {
                //console.log($('#registerform').serializeArray());
                return false;
            } else {

                var CoveredEmployee = {};
                var listOfTextTask = [];
                CoveredEmployee.PeriodDefinitionId = $(""#periodDefinitionId2"").val();
                CoveredEmployee.AllocatorDepartmentId = $(""#departmentSupervisor2"").val().split(""-"")[0];
                CoveredEmployee.Receiver = $(""#subSetEmployeeId"").val();

                $(""#textTaskContainer div[class=row]"").each(function ");
            WriteLiteral(@"(i, d) {
                    var TextTaskView = {};
                    var listOfCriteria = [];

                    //TextTaskView.TextTask = $("" #textTaskInputt"" + (i + 1)).val();
                    //TextTaskView.TrainingNeed = $("" #tagEditorTextTaskk"" + (i + 1)).val();
                    //TextTaskView.ParticipantId = $("" #participantt2Select2"" + (i + 1)).val().split(""-"")[1];
                    //TextTaskView.ParticipantDepartmentId = $("" #participantt2Select2"" + (i + 1)).val().split(""-"")[0];
                    var rowIndex = $(this).attr('index');
                    TextTaskView.TextTask = $(this).find(""input[id^='textTaskInputt']"").val();
                    TextTaskView.TrainingNeed = $(this).find(""textarea[id^='tagEditorTextTaskk']"").val();
                    TextTaskView.ParticipantId = $(this).find(""select[id^='participantt2Select2']"").val().split(""-"")[1];
                    TextTaskView.ParticipantDepartmentId = $(this).find(""select[id^='participantt2Select2']"").val().split(""-"")");
            WriteLiteral(@"[0];
                    TextTaskView.ParentTaskId = $(this).find(""select[id^='relatedWithTextTask']"").val();

                    $(""#criteriaRoww"" + (rowIndex) + "" div[class=row]"").each(function (ii2, dd2) {
                        var CriteriaView = {};
                        CriteriaView.Title = $(dd2).find(""input:eq(0)"").val();
                        CriteriaView.CalculationWay = $(dd2).find(""input:eq(1)"").val();
                        CriteriaView.LimitOfAdmission = $(dd2).find(""input:eq(2)"").val();
                        if ($(dd2).find(""input:eq(3)"").is("":checked""))
                            CriteriaView.IsProcessingCriteria = 1;
                        else
                            CriteriaView.isProcessingCriteria = 0;
                        listOfCriteria.push(CriteriaView);
                    })
                    TextTaskView.CriteriaViews = listOfCriteria;
                    listOfTextTask.push(TextTaskView);
                })
                CoveredEmployee.textTa");
            WriteLiteral(@"skViews = listOfTextTask;
                console.log(CoveredEmployee);
                //$(""#articleSubmit"").addClass('disabled');
                $(""#indirectAssignBTN"").attr(""disabled"", ""disabled"");
                var btn = $(""#indirectAssignBTN"");
                btn.button('loading');
                //var postdata = new FormData(this);
                //listOfSubTask = JSON.stringify(listOfSubTask);
                //var postdata = $(this).serializeArray();
                //postdata.append(JSON.stringify(listOfSubTask));
                //console.log(postdata);
                $.ajax(
                    {
                        //data:postdata,
                        url: '/TaskAssignment/AssignTextTaskToIndirect',
                        //url : formURL,
                        //data: postdata,
                        data: JSON.stringify(CoveredEmployee),
                        //data: ""firstName="" + $(""fn"").val(),
                        //cache: false,
                    ");
            WriteLiteral(@"    //contentType: false,
                        //processData: false,
                        datatype: 'json',
                        contentType: 'application/json; charset=utf-8',
                        type: 'POST',

                        success: function (data, textStatus, jqXHR) {
                            var message = """";
                            var duplicate = """";
                            if (data.result > 0) {
                                message += ""<span>اطلاعات  مورد نظر با موفقیت ثبت گردید</span><br><br>"";
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.success(message);
                                dt.ajax.reload();
                            }
                            else if (data.result == 0) {
                                message += ""<span>اطلاعات  مورد نظر ثبت نگردید..</span><br><br>"";
                    ");
            WriteLiteral(@"            toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.info(message);
                            }
                            if (data.duplicate != """") {
                                $(data.duplicate).each(function (i, m) {
                                    duplicate += ""<span>  "" + m + ""  </span><br><br>"";
                                })
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.info(duplicate);
                            }
                            if (data.notAuthorized == ""true"") {
                                message = ""کاربر گرامی جهت تخصیص با سمت سازمانی مورد نظر در بازه زمانی مجاز اقدام نمایید."";
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionC");
            WriteLiteral(@"lass = ""toast-top-center"";
                                toastr.info(message);
                            }
                            // dt.ajax.url(""/TaskAssignment/GetAssignedTaskList"");

                            //resetFormValidation();
                            //$(""#IndirectAssignmentFrm"")[0].reset();
                            //$(""#taskAssignmentTable"").DataTable().destroy();
                            //show_dataTable();
                            $(""#indirectAssignModal"").modal(""hide"");
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(""erorr00000"");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    }).always(function () {
                        $(""#indirectAssignBTN"").button('reset');
                    });
                //$.getScript('/assets/javascript/articleForm.js', function () {
          ");
            WriteLiteral(@"      //    ArticleForm.init(postdata);
                //    $(""#articleForm"")[0].reset();
                //});
                e.preventDefault(e);
            }
        });

        $(""#indirectAssignBTN"").trigger('click');
        //$(""#IndirectAssignmentFrm"").validate();
        //$(""#IndirectAssignmentFrm"").validate().element(""#subSetEmployeeId"");
        //$('#addTextResource2').trigger('click');

        $('#textTaskContainer').on('click', '.removeTextTaskBtnn', function () {
            $('#criteriaModall' + $(this).attr('index')).remove();
            $(this).closest('div.row').remove();
        })
        $('#critriaModalPlaceHolder').on('click', '.removeTextCriteriaBtnn', function () {
            $(this).closest('div.row').next().remove();
            $(this).closest('div.row').remove();
        })

    });
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
