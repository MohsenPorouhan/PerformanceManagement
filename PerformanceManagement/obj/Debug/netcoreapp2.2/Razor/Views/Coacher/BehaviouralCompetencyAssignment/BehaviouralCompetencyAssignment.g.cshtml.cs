#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\BehaviouralCompetencyAssignment.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dcddc6b3a153386af94ad776ca164b23de1e9924"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetencyAssignment), @"mvc.1.0.view", @"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetencyAssignment.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetencyAssignment.cshtml", typeof(AspNetCore.Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetencyAssignment))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dcddc6b3a153386af94ad776ca164b23de1e9924", @"/Views/Coacher/BehaviouralCompetencyAssignment/BehaviouralCompetencyAssignment.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_BehaviouralCompetencyAssignment_BehaviouralCompetencyAssignment : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("competencyAssignmentFrm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\BehaviouralCompetencyAssignment\BehaviouralCompetencyAssignment.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(29, 8505, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dcddc6b3a153386af94ad776ca164b23de1e99246241", async() => {
                BeginContext(102, 8425, true);
                WriteLiteral(@"
    <div class=""modal fade department modalClass"" id=""competencyAssignModal"" aria-hidden=""true"" data-backdrop=""static"">
        <div class=""modal-dialog modal-wide"">
            <div class=""modal-content"">
                <div class=""modal-header bg-blue"">
                    <button type=""button"" id=""modal-close"" class=""close""
                            data-dismiss=""modal"" aria-hidden=""true""></button>
                    <h4 class=""modal-title"">
                        <i class=""fa fa-file-o""></i>
                        اختصاص شایستگی رفتاری
                    </h4>
                </div>

                <div class=""modal-body"">
                    <div class=""form-body"">

                        <div id=""alert_danger"" class=""alert alert-danger display-hide"">
                            <button class=""close"" data-close=""alert""></button>
                            پر کردن فيلدهاي ستاره دار اجباري مي باشد.
                        </div>
                        <div class=""row"">
    ");
                WriteLiteral(@"                        <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                         دوره
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""periodDefinitionId"" id=""periodDefinitionId"" class=""form-control input-medium""></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-6"">
                         ");
                WriteLiteral(@"       <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                         مسئولیت واحد سازمانی
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""departmentSupervisor"" id=""departmentSupervisor"" class=""form-control input-medium""></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <!--/span-->
             ");
                WriteLiteral(@"               <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label id=""mojri_name_label"" class=""control-label col-md-3"">
                                        کارمندان
                                        <span class=""required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""subSetEmployeeId"" id=""subSetEmployeeId"" class=""select2 selectt2 form-control input-medium"" multiple></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--/span--");
                WriteLiteral(@">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label id=""mojri_name_label"" class=""control-label col-md-3"">
                                        راهنما
                                    </label>
                                    <div class=""col-md-9"">
                                        <a class=""btn btn-sm blue"" target=""_blank"" href=""/guideFile/competencyModel.pdf""><i class=""fa fa-file-o""></i>  سند شایستگی</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                         شایستگی رفتاری
                                        <span class=""");
                WriteLiteral(@"required"">
                                            *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""behaviourCompetency"" id=""behaviourCompetency"" class=""form-control select2 selectt2 input-medium"" multiple></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class=""col-md-6"" hidden=""hidden"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        تعیین سایر ارزیاب
                                        <span class=""required"">
     ");
                WriteLiteral(@"                                       *
                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <select name=""participant"" id=""participant"" class=""form-control select2 selectt2 input-medium""></select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class=""row"">
                            <div class=""col-md-6"">
                                <div class=""form-group"">
                                    <label class=""control-label col-md-3"">
                                        افزودن مصادیق
                                        <span class=""requ");
                WriteLiteral(@"ired"">

                                        </span>
                                    </label>
                                    <div class=""col-md-9"">
                                        <div class=""input-icon right"">
                                            <i class=""fa""></i>
                                            <textarea id=""tagEditorTruth"" name=""tagEditorTruth"" class=""form-control tag-editor-hidden-src""></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- END FORM-->
                </div>

                <div class=""modal-footer"">
                    <button type=""submit"" class=""btn green input-sm input-small"" id=""competencyAssignBTN"">ذخيره</button>
                    <button type=""button"" class=""btn red input-sm input-small"" id=""cancel2"" data-dismiss=""modal"">");
                WriteLiteral("<i class=\"fa fa-times\"></i>انصراف</button>\r\n                </div>\r\n            </div>\r\n            <!-- /.modal-content -->\r\n        </div>\r\n        <!-- /.modal-dialog -->\r\n    </div>\r\n    <div id=\"critriaModalPlaceHolder\"></div>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8534, 17105, true);
            WriteLiteral(@"
<script>
    $(document).ready(function () {
        $('#competencyAssignModal').modal('show');
        $('#tagEditorCompetency').tagEditor({
            placeholder: 'آیتم های مورد نظر را تایپ نمایید',
            maxLength: [1000],
            clickDelete: true
            //beforeTagDelete: function (field, editor, tags, val) {
            //    var q = confirm('Remove tag ""' + val + '""?');
            //    if (q) $('#response').prepend('Tag ' + val + ' deleted.');
            //    else $('#response').prepend('Removal of ' + val + ' discarded.');
            //    return q;
            //}
        });
        $('#tagEditorTruth').tagEditor({
            placeholder: 'آیتم های مورد نظر را تایپ نمایید',
            maxLength: [1000],
            clickDelete: true
            //beforeTagDelete: function (field, editor, tags, val) {
            //    var q = confirm('Remove tag ""' + val + '""?');
            //    if (q) $('#response').prepend('Tag ' + val + ' deleted.');
            //");
            WriteLiteral(@"    else $('#response').prepend('Removal of ' + val + ' discarded.');
            //    return q;
            //}
        });
        $('.selectt2').select2({
            placeholder: ""انتخاب کنید"",
            allowClear: true
        });
        $.ajax({
            type: 'get',
            url: '/share/GetPeriodDefinition',
            //data: { roleId: roleId },
            success: function (periodDefinition) {
                $(""#periodDefinitionId"").empty();
                //$(""#periodDefinitionId"").append(""<option></option>"");

                $(periodDefinition).each(function (i, p) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#periodDefinitionId"").append(""<option value='"" + p.periodDefinitoionId + ""'>"" + p.periodTitle + "" ("" + p.periodCode + "")</option>"");
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
        $.ajax({
            type: 'get");
            WriteLiteral(@"',
            url: '/TaskAssignment/GetDepartmentSupervisorList',
            async: true,
            //data: { roleId: roleId },
            success: function (department) {
                $(""#departmentSupervisor"").empty();
                $(""#departmentSupervisor"").append(""<option></option>"");

                $(department).each(function (i, d) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#departmentSupervisor"").append(""<option value='"" + d.EvaluationHierarchyId + ""-"" + d.PeopleId + ""'>"" + d.ShortName + ""</option>"");
                    if (d.PositionType == 1) {
                        $(""#departmentSupervisor"").val(d.EvaluationHierarchyId + ""-"" + d.PeopleId);
                        $(""#departmentSupervisor"").trigger('change');
                    }
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
        function formatResult2(node) {
            va");
            WriteLiteral(@"r level = 0;
            var $result
            if (node.element !== undefined) {
                level = (node.element.className);
                if (level.trim() !== '') {
                    level = (parseFloat(level.match(/\d+/)[0]));
                }

                if (node.element.className == 'level_0' || node.element.className == 'level_1') {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;font-weight: bold;"" > ' + node.text + '</span>');
                } else {
                    $result = $('<span style=""padding-right:' + (20 * level) + 'px;"" > ' + node.text + '</span>');

                }
            }


            return $result;
        }
        function buildHierarchy2(arry) {

            var roots = [], children = {};

            // find the top level nodes and hash the children based on parent
            for (var i = 0, len = arry.length; i < len; ++i) {
                var item = arry[i],
                    p = item.pa");
            WriteLiteral(@"rent,
                    target = !p ? roots : (children[p] || (children[p] = []));
                target.push({ value: item });
            }

            // function to recursively build the tree
            var findChildren2 = function (parent) {
                if (children[parent.value.EvaluationHierarchyId]) {
                    parent.children = children[parent.value.EvaluationHierarchyId];
                    $(parent.children).each(function (i, p) {
                        //$(""<option class='level_"" + p.value.Levell + ""' value='"" + p.value.EvaluationHierarchyId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetDepartmentIdDT option[value='"" + parent.value.EvaluationHierarchyId + ""']"");
                        if ($(""#subSetEmployeeId option[parent='"" + p.value.parent + ""']:last"").length > 0) {
                            $(""<option val="" + p.value.EvalHierarchyId + "" parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHi");
            WriteLiteral(@"erarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetEmployeeId option[parent='"" + p.value.parent + ""']:last"");
                        } else {
                            $(""<option val="" + p.value.EvalHierarchyId + "" parent="" + parent.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHierarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"").insertAfter(""#subSetEmployeeId option[val='"" + p.value.parent + ""']"");
                        }

                    })
                    for (var i = 0, len = parent.children.length; i < len; ++i) {

                        findChildren2(parent.children[i]);
                    }
                }
            };

            // enumerate through to handle the case where there are multiple roots
            for (var i = 0, len = roots.length; i < len; ++i) {
                $(roots).each(function (i, p) {
                    $(""#subSetEmployeeId"").append(""");
            WriteLiteral(@"<option val="" + p.value.EvalHierarchyId + ""  parent="" + p.value.EvaluationHierarchyId + "" class='level_"" + p.value.Levell + ""' value='"" + p.value.EvalHierarchyId + '-' + p.value.PeopleId + ""'>"" + p.value.text + ""</option>"");
                })
                findChildren2(roots[i]);
            }

            return roots;
        }

        $('#departmentSupervisor').on('change', function () {
            //if ($('#periodDefinitionIdDT').children('option:selected').val() == """" && $('#departmentId').children('option:selected').val() != """") {
            //    dt.ajax.url(""/AssignTask/GetTaskAssignmentList"");
            //    dt.ajax.reload();
            //}

            $.ajax({
                type: 'get',
                url: '/TaskAssignment/GetInDirectEmployees',
                data: {
                    departmentId: $('#departmentSupervisor').children('option:selected').val().split(""-"")[0],
                    peopleId: $('#departmentSupervisor').children('option:selected').val()");
            WriteLiteral(@".split(""-"")[1]
                },
                success: function (DepartmentResponsibilty) {
                    $(""#subSetEmployeeId"").empty();
                    $(""#subSetEmployeeId"").append(""<option></option>"");


                    var items = DepartmentResponsibilty;
                    buildHierarchy2(items);
                    $(""#subSetEmployeeId option[class='level_0']"").attr(""disabled"", ""disabled"");
                    //$(""#subSetEmployeeId option[class='level_1']"").attr(""disabled"", ""disabled"");

                    $('#subSetEmployeeId').select2({
                        placeholder: ""انتخاب واحد زیر مجموعه"",
                        allowClear: true,
                        width: ""300px"",
                        templateResult: formatResult2
                    });
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
        });

        $.ajax({
            type: 'get',
            url");
            WriteLiteral(@": '/share/BehaviouralCompetencyList',
            //data: { roleId: roleId },
            success: function (data) {
                $(""#behaviourCompetency"").empty();
                $(""#behaviourCompetency"").append(""<option></option>"");

                $(data).each(function (i, d) {
                    //$(""#parentName"").select2(""val"", d.departmentId);
                    $(""#behaviourCompetency"").append(""<option value='"" + d.behaviouralCompetencyId + ""'>"" + d.title + ""</option>"");
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })
        $.ajax({
            type: 'get',
            url: '/share/ParticipantList',
            //data: { roleId: roleId },
            success: function (data) {
                $(""#participant"").empty();
                $(""#participant"").append(""<option></option>"");

                $(data).each(function (i, d) {
                    //$(""#parentName"").select2(""val"", d.depart");
            WriteLiteral(@"mentId);
                    $(""#participant"").append(""<option value='"" + d.EvaluationHierarchyId + '-' + d.PeopleId + ""'>"" + d.fullname + ""</option>"");
                })
            },
            error: function (status) {
                alert(""Error"");
            }
        })


        $(""#competencyAssignmentFrm"").submit(function (e) {
            //alert('dpCreationSubmit');
            //var postdata2 = $(this).serializeArray();
            //debugger;

            var form = $('#competencyAssignmentFrm');

            form.validate({
                //console.log($('#registerform').serializeArray());
                errorElement: 'span', //default input error message container
                errorClass: 'help-block', // default input error message class
                focusInvalid: false, // do not focus the last invalid input
                ignore: """",
                rules: {
                    periodDefinitionId: {
                        required: true
             ");
            WriteLiteral(@"       },
                    departmentSupervisor: {
                        required: true
                    },
                    subSetEmployeeId: {
                        required: true
                    },
                    behaviourCompetency: {
                        required: true
                    }
                },
                messages: {
                    periodDefinitionId: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    },
                    departmentSupervisor: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    },
                    subSetEmployeeId: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    },
                    behaviourCompetency: {
                        required: ""پر کردن این فیلد الزامی می باشد""
                    }
                },
                invalidHandler: function (event, validator) { //display error a");
            WriteLiteral(@"lert on form submit
                    //                    success2.hide();
                    //                    error2.show();
                    //                    App.scrollTo(error2, -200);
                },
                errorPlacement: function (error, element) { // render error placement for each input type
                    var icon = $(element).parent('.input-icon').children('i');
                    icon.removeClass('fa-check').addClass(""fa-warning"");
                    icon.attr(""data-original-title"", error.text()).tooltip();
                },
                highlight: function (element) { // hightlight error inputs
                    $(element)
                        .closest('.form-group').addClass('has-error'); // set error class to the control group
                },

                unhighlight: function (element) { // revert the change done by hightlight

                },

                success: function (label, element) {
                    var");
            WriteLiteral(@" icon = $(element).parent('.input-icon').children('i');
                    $(element).closest('.form-group').removeClass('has-error').addClass('has-success'); // set success class to the control group
                    icon.removeClass(""fa-warning"").addClass(""fa-check"");
                },

                submitHandler: function (form) {
                    //                    success2.show();
                    //                    error2.hide();
                }
            })
            if (form.valid() == false) {
                //console.log($('#registerform').serializeArray());
                return false;
            } else {
                //$(""#articleSubmit"").addClass('disabled');
                $(""#competencyAssignBTN"").attr(""disabled"", ""disabled"");
                var btn = $(""#competencyAssignBTN"");
                btn.button('loading');
                var postdata = new FormData(this);
                //listOfSubTask = JSON.stringify(listOfSubTask);
           ");
            WriteLiteral(@"     //var postdata = $(this).serializeArray();
                //postdata.append(JSON.stringify(listOfSubTask));
                //console.log(postdata);
                $.ajax(
                    {
                        //data:postdata,
                        url: '/BehaviouralCompetencyAssignment/BehaviouralCompetencyAssignment',
                        //datatype: 'json',
                        //url : formURL,
                        //data: postdata2,
                        data: postdata,
                        //data: ""firstName="" + $(""fn"").val(),
                        cache: false,
                        contentType: false,
                        processData: false,
                        type: ""post"",

                        success: function (data, textStatus, jqXHR) {
                            var message = """";
                            var duplicate = """";
                            if (data.result > 0) {
                                message += ""<span>اطلا");
            WriteLiteral(@"عات  مورد نظر با موفقیت ثبت گردید</span><br><br>"";
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.success(message);
                                // dt.ajax.url(""/TaskAssignment/GetAssignedTaskList"");
                                dt.ajax.reload();
                            }
                            else if (data.result == 0) {
                                message += ""<span>اطلاعات  مورد نظر ثبت نگردید..</span><br><br>"";
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.info(message);
                            }
                            if (data.duplicate != """") {
                                $(data.duplicate).each(function (i, m) {
                                    duplicate += ""<span>  "" + m + "" ");
            WriteLiteral(@" </span><br><br>"";
                                })
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.info(duplicate);
                            }

                            if (data.notAuthorized) {
                                message = ""کاربر گرامی جهت تخصیص با سمت سازمانی مورد نظر در بازه زمانی مجاز اقدام نمایید."";
                                toastr.options.timeOut = ""15000"";
                                toastr.options.positionClass = ""toast-top-center"";
                                toastr.info(message);
                            }
                            //resetFormValidation();
                            //$(""#competencyAssignmentFrm"")[0].reset();
                            //$(""#taskAssignmentTable"").DataTable().destroy();
                            //show_dataTable();
                            $(""#competencyAssignModal""");
            WriteLiteral(@").modal(""hide"");
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert(""erorr00000"");
                            alert(jqXHR);
                            alert(textStatus);
                        }
                    }).always(function () {
                        $(""#competencyAssignBTN"").button('reset');
                    });
                //$.getScript('/assets/javascript/articleForm.js', function () {
                //    ArticleForm.init(postdata);
                //    $(""#articleForm"")[0].reset();
                //});
                e.preventDefault(e);
            }
        });
    });
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
