#pragma checksum "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\ViewScore.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "61fe0805d5b4b41b80a5057f2f4bd6345d053223"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Coacher_TaskAssignment_ViewScore), @"mvc.1.0.view", @"/Views/Coacher/TaskAssignment/ViewScore.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Coacher/TaskAssignment/ViewScore.cshtml", typeof(AspNetCore.Views_Coacher_TaskAssignment_ViewScore))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement;

#line default
#line hidden
#line 2 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models;

#line default
#line hidden
#line 3 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin;

#line default
#line hidden
#line 4 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.HRAdmin.View;

#line default
#line hidden
#line 5 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.ViewModels;

#line default
#line hidden
#line 6 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.Coacher.View;

#line default
#line hidden
#line 7 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin;

#line default
#line hidden
#line 8 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Models.PlanningAdmin.View;

#line default
#line hidden
#line 9 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 10 "D:\PerformanceManagement\PerformanceManagement\Views\_ViewImports.cshtml"
using PerformanceManagement.Util;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"61fe0805d5b4b41b80a5057f2f4bd6345d053223", @"/Views/Coacher/TaskAssignment/ViewScore.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cbdcf2ba1ce3b535eb539d96aea4d66da299c9f", @"/Views/_ViewImports.cshtml")]
    public class Views_Coacher_TaskAssignment_ViewScore : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "D:\PerformanceManagement\PerformanceManagement\Views\Coacher\TaskAssignment\ViewScore.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 11004, true);
            WriteLiteral(@"<div class=""modal fade department modalClass"" id=""scoreAssignmentModal"" tabindex="""" aria-hidden=""true"">
    <div class=""modal-dialog "">
        <div class=""modal-content"">
            <div class=""modal-header bg-blue"">
                <button type=""button"" id=""modal-close"" class=""close""
                        data-dismiss=""modal"" aria-hidden=""true""></button>
                <h4 id=""sabt_hazine_personnel"" class=""modal-title"">
                    <i class=""fa fa-file-o""></i>
                    مشاهده نمره
                </h4>
            </div>

            <div class=""modal-body"">
                <div class=""form-body"" id=""scoreTbl"">

                </div>
                <!-- END FORM-->
            </div>

            <div class=""modal-footer"">
                <button type=""button"" class=""btn green input-sm input-small"" id=""cancel11"" data-dismiss=""modal""><i class=""fa fa-times""></i>بستن</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!--");
            WriteLiteral(@" /.modal-dialog -->
</div>
<script>
    //  $(document).ready(function () {

    var isTrue = false;
    var finalResult = false;
    var row;
    var coacherId;
    var allocatorLevel;
    var coacherLevell
    $.ajax({
        type: 'get',
        url: '/Share/GetCurrentUserInfo',
        async: false,
        success: function (data) {
            coacherId = data;
        },
        error: function (status) {
            alert(""Error"");
        }
    })

    var type;
    var length = dt.rows('.selected').data().length;
    var selector;
    if (length > 0) {
        selector = ""#taskAssignmentTable >tbody>tr.selected"";
    } else {
        selector = ""#taskAssignmentTable >tbody>tr"";
    }
    var criteriaCount;
    $(selector).each(function (i, tr) {
        row = dt.row(tr);

        $.ajax({
            type: 'get',
            url: '/Share/CriteiaCount',
            data: { taskId: row.data().TaskId },
            async: false,
            success: function (da");
            WriteLiteral(@"ta) {
                criteriaCount = data;
            },
            error: function (status) {
                alert(""Error"");
            }
        })

        if (row.data().Levell == 2 && ((row.data().AllocatorPersonId == coacherId && row.data().allocatorRoleName != ""PlanningAdmin"") || row.data().allocatorRoleName == ""HRAdmin"")) {
            $.ajax({
                url: '/TaskAssignment/GetScore',
                data: {
                    evaluationId: row.data().EvaluationId
                    , hasCriteria: criteriaCount
                    , hasParticipant: row.data().hasParticipant
                    , participantConfirmation: row.data().participantConfirmation
                    , type: 1
                },
                //contentType: 'aplication/json;charset=utf-8',
                type: ""POST"",
                datatype: 'html',
                async: false,
                success: function (data) {
                    $('#scoreTbl').html(data);
                }");
            WriteLiteral(@",
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""Error"");
                }
            })
            finalResult = true;
        }
        else if (row.data().Levell >= 3 && (row.data().allocatorRoleName == ""HRAdmin"")) {
            $.ajax({
                url: '/TaskAssignment/GetScore',
                data: {
                    evaluationId: row.data().EvaluationId
                    , hasCriteria: criteriaCount
                    , hasParticipant: row.data().hasParticipant
                    , participantConfirmation: row.data().participantConfirmation
                    , type: 2
                },
                //contentType: 'aplication/json;charset=utf-8',
                type: ""POST"",
                datatype: 'html',
                async: false,
                success: function (data) {
                    $('#scoreTbl').html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {");
            WriteLiteral(@"
                    alert(""Error"");
                }
            })
            finalResult = true;
        }
        else if (row.data().Levell >= 2 && row.data().allocatorRoleName == ""PlanningAdmin"") {
            $.ajax({
                url: '/TaskAssignment/GetScore',
                data: {
                    evaluationId: row.data().EvaluationId
                    , hasCriteria: criteriaCount
                    , hasParticipant: row.data().hasParticipant
                    , participantConfirmation: row.data().participantConfirmation
                    , type: 3
                },
                //contentType: 'aplication/json;charset=utf-8',
                type: ""POST"",
                datatype: 'html',
                async: false,
                success: function (data) {
                    $('#scoreTbl').html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""Error"");
                }
         ");
            WriteLiteral(@"   })
            finalResult = true;
        }
        else if (row.data().Levell >= 3 && row.data().AllocatorEvaluationHierarchyId == row.data().parent && row.data().allocatorRoleName != ""HRAdmin"" && row.data().allocatorRoleName != ""PlanningAdmin"") {
            $.ajax({
                url: '/TaskAssignment/GetScore',
                data: {
                    evaluationId: row.data().EvaluationId
                    , hasCriteria: criteriaCount
                    , hasParticipant: row.data().hasParticipant
                    , participantConfirmation: row.data().participantConfirmation
                    , type: 2
                },
                //contentType: 'aplication/json;charset=utf-8',
                type: ""POST"",
                datatype: 'html',
                async: false,
                success: function (data) {
                    $('#scoreTbl').html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    ");
            WriteLiteral(@"alert(""Error"");
                }
            })
            finalResult = true;
        }
        else if (row.data().Levell >= 3 && (row.data().AllocatorPersonId == coacherId && row.data().allocatorRoleName != ""PlanningAdmin"" && row.data().allocatorRoleName != ""HRAdmin"")) {
            $.ajax({
                type: 'get',
                url: '/Share/AllocatorLevel',
                async: false,
                data: {
                    coacherId: row.data().AllocatorPersonId
                    , coacherDepartmentId: row.data().AllocatorEvaluationHierarchyId
                    , departmentId: row.data().RecieverAllocationEvaluationHierarchyId
                    , personId: row.data().RecieverAllocationPersonId
                },
                success: function (data) {
                    allocatorLevel = data[0].Levell;
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
            $.ajax({
    ");
            WriteLiteral(@"            url: '/TaskAssignment/GetScore',
                data: {
                    evaluationId: row.data().EvaluationId
                    , hasCriteria: criteriaCount
                    , hasParticipant: row.data().hasParticipant
                    , participantConfirmation: row.data().participantConfirmation
                    , type: 4
                    , coacherLevel: (4-allocatorLevel)
                },
                //contentType: 'aplication/json;charset=utf-8',
                type: ""POST"",
                datatype: 'html',
                async: false,
                success: function (data) {
                    $('#scoreTbl').html(data);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(""Error"");
                }
            })
            finalResult = true;
        }
        else {
            $.ajax({
                type: 'get',
                url: '/Share/AllocatorLevel',
                ");
            WriteLiteral(@"async: false,
                data: {
                    coacherId: row.data().AllocatorPersonId
                    , coacherDepartmentId: row.data().AllocatorEvaluationHierarchyId
                    , departmentId: row.data().RecieverAllocationEvaluationHierarchyId
                    , personId: row.data().RecieverAllocationPersonId
                },
                success: function (data) {
                    allocatorLevel = data[0].Levell;
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
            $.ajax({
                type: 'get',
                url: '/Share/AllocatorLevel',
                async: false,
                data: {
                    coacherId: coacherId
                    , coacherDepartmentId: $('#departmentId').children('option:selected').val()
                    , departmentId: row.data().RecieverAllocationEvaluationHierarchyId
                    , personId: row.data()");
            WriteLiteral(@".RecieverAllocationPersonId
                },
                success: function (data) {
                    coacherLevell = data[0].Levell;
                },
                error: function (status) {
                    alert(""Error"");
                }
            })
            if (row.data().Levell >= 3 && (row.data().AllocatorPersonId != coacherId && row.data().allocatorRoleName != ""PlanningAdmin"" && row.data().allocatorRoleName != ""HRAdmin"" && row.data().AllocatorEvaluationHierarchyId != row.data().parent) && coacherLevell <= allocatorLevel) {
                finalResult = true;
                $.ajax({
                    url: '/TaskAssignment/GetScore',
                    data: {
                        evaluationId: row.data().EvaluationId
                        , hasCriteria: criteriaCount
                        , hasParticipant: row.data().hasParticipant
                        , participantConfirmation: row.data().participantConfirmation
                        , type: 5
 ");
            WriteLiteral(@"                       , coacherLevel: (4-allocatorLevel)
                    },
                    //contentType: 'aplication/json;charset=utf-8',
                    type: ""POST"",
                    datatype: 'html',
                    async: false,
                    success: function (data) {
                        $('#scoreTbl').html(data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(""Error"");
                    }
                })
            }
        }
    })
    if (!finalResult) {
        alert(""مجاز به مشاهده نمرات وظیفه مورد نظر نمی باشید."");
    } else if (finalResult) {
        $('#scoreAssignmentModal').modal('show');
    }
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
